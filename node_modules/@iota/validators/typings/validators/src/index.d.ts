/**
 * @module validators
 */
import * as errors from '../../errors';
export { errors };
/**
 * This method takes an address with a checksum and validates that the checksum is correct.
 *
 * ## Related methods
 *
 * To generate a new address with a checksum, use the [`getNewAddress()`]{@link #module_core.getNewAddress} method.
 *
 * @method isAddress
 *
 * @summary Validates the checksum of the given address.
 *
 * @memberof module:validators
 *
 * @param {string} address - Address with a checksum
 *
 * @example
 * ```js
 * let valid = Validator.isAddress('9FNJWLMBECSQDKHQAGDHDPXBMZFMQIMAFAUIQTDECJVGKJBKHLEBVU9TWCTPRJGYORFDSYENIQKBVSYKW9NSLGS9UW');
 * ```
 *
 * @return {boolean} valid - Whether the checksum is valid
 *
 */
export declare const isAddress: (address: any) => boolean;
export declare const addressValidator: (address: any) => any[];
export { arrayValidator, depthValidator, hashValidator, inputValidator, isHash, isInput, isNinesTrytes, isEmpty, isSecurityLevel, isStartEndOptions, isTag, isTransfer, isTrytes, isTrytesOfExactLength, isTrytesOfMaxLength, isUri, minWeightMagnitudeValidator, securityLevelValidator, seedValidator, tagValidator, transferValidator, trytesValidator, uriValidator, validate, Validatable, Validator, } from '../../guards';
export declare const isAddressArray: (x: readonly any[]) => boolean;
export declare const isHashArray: (x: readonly any[]) => boolean;
export declare const isInputArray: (x: readonly any[]) => boolean;
export declare const isTagArray: (x: readonly any[]) => boolean;
export declare const isTransferArray: (x: readonly any[]) => boolean;
export declare const isTransfersArray: (x: readonly any[]) => boolean;
export declare const isTrytesArray: (x: readonly any[]) => boolean;
export declare const isUriArray: (x: readonly any[]) => boolean;
export { isAttached, isTail, isHead, isTransaction } from '@iota/transaction';
