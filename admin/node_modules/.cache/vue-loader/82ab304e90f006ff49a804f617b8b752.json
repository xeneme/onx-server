{"remainingRequest":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/src/components/ui/sliders/Sliders.vue?vue&type=template&id=7968546c&","dependencies":[{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/src/components/ui/sliders/Sliders.vue","mtime":1594635176332},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}