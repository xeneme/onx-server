{"remainingRequest":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/vuestic-ui/src/components/vuestic-components/va-dropdown/VaDropdown.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/vuestic-ui/src/components/vuestic-components/va-dropdown/VaDropdown.vue","mtime":1598034796000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQpAaW1wb3J0ICcuLi8uLi92dWVzdGljLXNhc3MvcmVzb3VyY2VzL3Jlc291cmNlcyc7DQoNCi52YS1kcm9wZG93biB7DQogICZfX2NvbnRlbnQgew0KICAgIC8qb3ZlcmZsb3c6IGhpZGRlbjsqLw0KICAgIHotaW5kZXg6IDEwMDsNCiAgfQ0KfQ0K"},{"version":3,"sources":["VaDropdown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgTA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"VaDropdown.vue","sourceRoot":"node_modules/vuestic-ui/src/components/vuestic-components/va-dropdown","sourcesContent":["<template>\r\n  <div class=\"va-dropdown\">\r\n    <div\r\n      class=\"va-dropdown__anchor\"\r\n      @mouseover=\"onMouseOver()\"\r\n      @mouseout=\"onMouseOut()\"\r\n      @click=\"onAnchorClick()\"\r\n      ref=\"anchor\"\r\n    >\r\n      <slot name=\"anchor\"/>\r\n    </div>\r\n    <div\r\n      class=\"va-dropdown__content\"\r\n      v-if=\"showContent\"\r\n      @mouseover=\"isContentHoverable && onMouseOver()\"\r\n      @mouseout=\"onMouseOut()\"\r\n      ref=\"content\"\r\n    >\r\n      <div\r\n        v-if=\"keepAnchorWidth\"\r\n        ref=\"anchorWidthContainer\"\r\n        class=\"va-dropdown__anchor-width-container\"\r\n        :style=\"anchorWidthContainerStyles\"\r\n      >\r\n        <slot/>\r\n      </div>\r\n      <slot v-else/>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Popper from 'popper.js'\r\nimport { DebounceLoader } from 'asva-executors'\r\n\r\nexport default {\r\n  name: 'va-dropdown',\r\n  data () {\r\n    return {\r\n      popperInstance: null,\r\n      isClicked: false,\r\n      anchorWidth: undefined,\r\n\r\n      isMouseHovered: false,\r\n      hoverOverDebounceLoader: new DebounceLoader(\r\n        async () => {\r\n          this.isMouseHovered = true\r\n        },\r\n        this.hoverOverTimeout,\r\n      ),\r\n      hoverOutDebounceLoader: new DebounceLoader(\r\n        async () => {\r\n          this.isMouseHovered = false\r\n        },\r\n        this.hoverOutTimeout,\r\n      ),\r\n    }\r\n  },\r\n  created () {\r\n    this.registerClickOutsideListener()\r\n  },\r\n  beforeDestroy () {\r\n    this.unregisterClickOutsideListener()\r\n    this.removePopper()\r\n  },\r\n  mounted () {\r\n    this.handlePopperInstance()\r\n  },\r\n  watch: {\r\n    showContent: {\r\n      immediate: true,\r\n      handler (showContent) {\r\n        this.handlePopperInstance()\r\n      },\r\n    },\r\n  },\r\n  props: {\r\n    debugId: String,\r\n    position: String,\r\n    boundaryBody: Boolean,\r\n    value: Boolean,\r\n    offset: [String, Number],\r\n    disabled: Boolean,\r\n    fixed: Boolean,\r\n    keepAnchorWidth: Boolean, // Means dropdown width should be the same as anchor's width.\r\n    preventOverflow: {// If set to false - dropdown won't dodge outside container.\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    closeOnClickOutside: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    closeOnAnchorClick: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    isContentHoverable: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    trigger: {\r\n      default: 'click',\r\n      validator: trigger => ['click', 'hover', 'none'].includes(trigger),\r\n    },\r\n    hoverOverTimeout: {\r\n      type: Number,\r\n      default: 30,\r\n    },\r\n    hoverOutTimeout: {\r\n      type: Number,\r\n      default: 200,\r\n    },\r\n  },\r\n  methods: {\r\n    handlePopperInstance () {\r\n      if (this.popperInstance) {\r\n        this.removePopper()\r\n      }\r\n\r\n      if (!this.showContent) {\r\n        return\r\n      }\r\n\r\n      this.updateAnchorWidth()\r\n\r\n      // I'm not entirely sure why $nextTick is needed here.\r\n      this.$nextTick(() => {\r\n        this.initPopper()\r\n      })\r\n    },\r\n    onAnchorClick () {\r\n      this.$emit('anchorClick')\r\n      if (this.disabled) {\r\n        return\r\n      }\r\n      if (this.isClicked && !this.closeOnAnchorClick) {\r\n        return\r\n      }\r\n      this.isClicked = !this.isClicked\r\n    },\r\n    // Kinda complex logic here.\r\n    // We want to achieve 2 things:\r\n    // * Fast mouse-over shouldn't trigger dropdown.\r\n    // * Dropdown shouldn't close when you move mouse from anchor to content (even with offset).\r\n    onMouseOver () {\r\n      if (this.disabled) {\r\n        return\r\n      }\r\n      if (!this.isMouseHovered) {\r\n        this.hoverOverDebounceLoader.run()\r\n      }\r\n\r\n      this.hoverOutDebounceLoader.reset()\r\n    },\r\n    onMouseOut () {\r\n      if (!this.isContentHoverable) {\r\n        this.isMouseHovered = false\r\n      }\r\n      this.hoverOutDebounceLoader.run()\r\n      this.hoverOverDebounceLoader.reset()\r\n    },\r\n    registerClickOutsideListener () {\r\n      document.addEventListener('click', event => this.handleDocumentClick(event), false)\r\n    },\r\n    unregisterClickOutsideListener () {\r\n      document.removeEventListener('click', event => this.handleDocumentClick(event), false)\r\n    },\r\n    handleDocumentClick (event) {\r\n      let el = event.target\r\n      const clickedElements = [] // Array because dropdowns can be nested.\r\n      // TODO Make DOM walk-over global, so that each dropdown doesn't have to do it.\r\n      while (el) {\r\n        clickedElements.push(el)\r\n        el = el.parentNode\r\n      }\r\n      const isCurrentDropdownClicked = clickedElements.includes(this.$refs.anchor) || clickedElements.includes(this.$refs.content)\r\n      if (isCurrentDropdownClicked) {\r\n        return\r\n      }\r\n      this.onClickOutside()\r\n    },\r\n    onClickOutside () {\r\n      this.$emit('clickOutside')\r\n      if (!this.closeOnClickOutside) {\r\n        return\r\n      }\r\n      this.hide()\r\n    },\r\n    updateAnchorWidth () {\r\n      if (this.keepAnchorWidth) {\r\n        let anchorWidth = this.$refs.anchor.offsetWidth\r\n        if (this.$refs.anchorWidthContainer && this.$refs.anchorWidthContainer.scrollHeight > this.$refs.anchorWidthContainer.clientHeight) {\r\n          anchorWidth = this.$refs.anchor.offsetWidth - this.scrollWidth\r\n        }\r\n        this.anchorWidth = anchorWidth\r\n      }\r\n      if (this.popperInstance) {\r\n        this.popperInstance.scheduleUpdate()\r\n      }\r\n    },\r\n    // @public\r\n    hide () {\r\n      if (this.trigger === 'click') {\r\n        this.isClicked = false\r\n      }\r\n    },\r\n    initPopper () {\r\n      const options = {\r\n        placement: this.position || 'bottom',\r\n        modifiers: {\r\n          preventOverflow: {\r\n            enabled: this.preventOverflow,\r\n          },\r\n        },\r\n        positionFixed: this.fixed,\r\n        arrow: {\r\n          enabled: false,\r\n        },\r\n        onCreate: () => {\r\n          this.$emit('input', true)\r\n        },\r\n      }\r\n\r\n      if (!this.preventOverflow) {\r\n        options.modifiers.hide = { enabled: false }\r\n      }\r\n\r\n      if (this.boundaryBody) {\r\n        options.modifiers.preventOverflow.boundariesElement = window\r\n      }\r\n\r\n      if (this.offset) {\r\n        options.modifiers.offset = {\r\n          enabled: true,\r\n          offset: this.offset,\r\n        }\r\n        options.modifiers.keepTogether = { enabled: false }\r\n        options.modifiers.arrow = { enabled: false }\r\n      }\r\n\r\n      this.popperInstance = new Popper(\r\n        this.$refs.anchor,\r\n        this.$refs.content,\r\n        options,\r\n      )\r\n\r\n      // temporary solution\r\n      this.updatePopper()\r\n    },\r\n    removePopper () {\r\n      this.$emit('input', false)\r\n\r\n      if (!this.popperInstance) {\r\n        return\r\n      }\r\n      this.popperInstance.destroy()\r\n      this.popperInstance = null\r\n    },\r\n    updatePopper () {\r\n      // used by select\r\n      if (!this.popperInstance) {\r\n        return\r\n      }\r\n      this.updateAnchorWidth()\r\n    },\r\n  },\r\n  computed: {\r\n    anchorWidthContainerStyles () {\r\n      return {\r\n        width: this.anchorWidth + 'px',\r\n        maxWidth: this.anchorWidth + 'px',\r\n      }\r\n    },\r\n    showContent () {\r\n      switch (this.trigger) {\r\n        case 'hover':\r\n          return this.isMouseHovered\r\n        case 'click':\r\n          return this.isClicked\r\n        case 'none':\r\n          return this.value\r\n        default:\r\n          throw new Error('Unknown trigger for showContent()')\r\n      }\r\n    },\r\n    scrollWidth () {\r\n      const div = document.createElement('div')\r\n\r\n      div.style.overflowY = 'scroll'\r\n      div.style.width = '50px'\r\n      div.style.height = '50px'\r\n      div.style.visibility = 'hidden'\r\n\r\n      document.body.appendChild(div)\r\n      const scrollWidth = div.offsetWidth - div.clientWidth\r\n      document.body.removeChild(div)\r\n      return scrollWidth\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import '../../vuestic-sass/resources/resources';\r\n\r\n.va-dropdown {\r\n  &__content {\r\n    /*overflow: hidden;*/\r\n    z-index: 100;\r\n  }\r\n}\r\n</style>\r\n"]}]}