{"remainingRequest":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/src/components/maps/bubble-maps/BubbleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/src/components/maps/bubble-maps/BubbleMap.vue","mtime":1594635175640},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KCmltcG9ydCAnYW1jaGFydHMzJwppbXBvcnQgJ2FtY2hhcnRzMy9hbWNoYXJ0cy9wbHVnaW5zL3Jlc3BvbnNpdmUvcmVzcG9uc2l2ZS5qcycKaW1wb3J0ICdhbWNoYXJ0czMvYW1jaGFydHMvc2VyaWFsLmpzJwppbXBvcnQgJ2FtY2hhcnRzMy9hbWNoYXJ0cy90aGVtZXMvbGlnaHQnCgppbXBvcnQgJ2FtbWFwMycKaW1wb3J0ICdhbW1hcDMvYW1tYXAvbWFwcy9qcy93b3JsZExvdycKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnYnViYmxlLW1hcCcsCgogIHByb3BzOiBbJ21hcERhdGEnXSwKCiAgbWV0aG9kczogewogICAgZHJhd01hcCAoKSB7CiAgICAgIC8qIGdsb2JhbCBBbUNoYXJ0cyAqLwogICAgICBjb25zdCBtaW5CdWxsZXRTaXplID0gMwogICAgICBjb25zdCBtYXhCdWxsZXRTaXplID0gNzAKICAgICAgbGV0IG1pbiA9IEluZmluaXR5CiAgICAgIGxldCBtYXggPSAtSW5maW5pdHkKICAgICAgQW1DaGFydHMudGhlbWUgPSBBbUNoYXJ0cy50aGVtZXMubGlnaHQKCiAgICAgIC8vIGdldCBtaW4gYW5kIG1heCB2YWx1ZXMKICAgICAgdGhpcy5tYXBEYXRhLmRhdGEuZm9yRWFjaCgoZGF0YUl0ZW0pID0+IHsKICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGFJdGVtLnZhbHVlCiAgICAgICAgaWYgKHZhbHVlIDwgbWluKSB7CiAgICAgICAgICBtaW4gPSB2YWx1ZQogICAgICAgIH0KICAgICAgICBpZiAodmFsdWUgPiBtYXgpIHsKICAgICAgICAgIG1heCA9IHZhbHVlCiAgICAgICAgfQogICAgICB9KQoKICAgICAgLy8gYnVpbGQgbWFwCiAgICAgIGNvbnN0IG1hcCA9IG5ldyBBbUNoYXJ0cy5BbU1hcCgpCgogICAgICBtYXAucHJvamVjdGlvbiA9ICd3aW5rZWwzJwogICAgICBtYXAuYWRkVGl0bGUoJ1BvcHVsYXRpb24gb2YgdGhlIFdvcmxkIGluIDIwMTEnLCAxNCwgMSwgMSwgZmFsc2UpCiAgICAgIG1hcC5hZGRUaXRsZSgnc291cmNlOiBHYXBtaW5kZXInLCAxMSwgMSwgMSwgMSwgZmFsc2UpCiAgICAgIG1hcC5hcmVhc1NldHRpbmdzID0gewogICAgICAgIHVubGlzdGVkQXJlYXNDb2xvcjogJyNlZWUnLAogICAgICAgIHVubGlzdGVkQXJlYXNBbHBoYTogMSwKICAgICAgICBvdXRsaW5lQ29sb3I6ICcjZmZmJywKICAgICAgICBvdXRsaW5lVGhpY2tuZXNzOiAyLAogICAgICB9CiAgICAgIG1hcC5pbWFnZXNTZXR0aW5ncyA9IHsKICAgICAgICBiYWxsb29uVGV4dDogJzxzcGFuIHN0eWxlPSJmb250LXNpemU6MTRweCI+PGI+W1t0aXRsZV1dPC9iPjogW1t2YWx1ZV1dPC9zcGFuPicsCiAgICAgICAgYWxwaGE6IDAuNzUsCiAgICAgIH0KCiAgICAgIGNvbnN0IGRhdGFQcm92aWRlciA9IHsKICAgICAgICBtYXBWYXI6IEFtQ2hhcnRzLm1hcHMud29ybGRMb3csCiAgICAgICAgaW1hZ2VzOiBbXSwKICAgICAgfQoKICAgICAgLy8gY3JlYXRlIGNpcmNsZSBmb3IgZWFjaCBjb3VudHJ5CiAgICAgIC8vIGl0J3MgYmV0dGVyIHRvIHVzZSBjaXJjbGUgc3F1YXJlIHRvIHNob3cgZGlmZmVyZW5jZSBiZXR3ZWVuIHZhbHVlcywgbm90IGEgcmFkaXVzCiAgICAgIGNvbnN0IG1heFNxdWFyZSA9IG1heEJ1bGxldFNpemUgKiBtYXhCdWxsZXRTaXplICogMiAqIE1hdGguUEkKICAgICAgY29uc3QgbWluU3F1YXJlID0gbWluQnVsbGV0U2l6ZSAqIG1pbkJ1bGxldFNpemUgKiAyICogTWF0aC5QSQoKICAgICAgLy8gY3JlYXRlIGNpcmNsZSBmb3IgZWFjaCBjb3VudHJ5CiAgICAgIHRoaXMubWFwRGF0YS5kYXRhLmZvckVhY2goKGRhdGFJdGVtKSA9PiB7CiAgICAgICAgY29uc3QgdmFsdWUgPSBkYXRhSXRlbS52YWx1ZQogICAgICAgIC8vIGNhbGN1bGF0ZSBzaXplIG9mIGEgYnViYmxlCiAgICAgICAgbGV0IHNxdWFyZSA9ICh2YWx1ZSAtIG1pbikgLyAobWF4IC0gbWluKSAqIChtYXhTcXVhcmUgLSBtaW5TcXVhcmUpICsgbWluU3F1YXJlCiAgICAgICAgaWYgKHNxdWFyZSA8IG1pblNxdWFyZSkgewogICAgICAgICAgc3F1YXJlID0gbWluU3F1YXJlCiAgICAgICAgfQogICAgICAgIGNvbnN0IHNpemUgPSBNYXRoLnNxcnQoc3F1YXJlIC8gKE1hdGguUEkgKiAyKSkKICAgICAgICBjb25zdCBpZCA9IGRhdGFJdGVtLmNvZGUKICAgICAgICBkYXRhUHJvdmlkZXIuaW1hZ2VzLnB1c2goewogICAgICAgICAgdHlwZTogJ2NpcmNsZScsCiAgICAgICAgICB3aWR0aDogc2l6ZSwKICAgICAgICAgIGhlaWdodDogc2l6ZSwKICAgICAgICAgIGNvbG9yOiBkYXRhSXRlbS5jb2xvciwKICAgICAgICAgIGxvbmdpdHVkZTogdGhpcy5tYXBEYXRhLmxhdGxvbmdbaWRdLmxvbmdpdHVkZSwKICAgICAgICAgIGxhdGl0dWRlOiB0aGlzLm1hcERhdGEubGF0bG9uZ1tpZF0ubGF0aXR1ZGUsCiAgICAgICAgICB0aXRsZTogZGF0YUl0ZW0ubmFtZSwKICAgICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICB9KQogICAgICB9KQoKICAgICAgbWFwLmRhdGFQcm92aWRlciA9IGRhdGFQcm92aWRlcgogICAgICBtYXAud3JpdGUodGhpcy4kZWwpCiAgICB9LAogIH0sCgogIG1vdW50ZWQgKCkgewogICAgdGhpcy5kcmF3TWFwKCkKICB9LAp9Cg=="},{"version":3,"sources":["BubbleMap.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"BubbleMap.vue","sourceRoot":"src/components/maps/bubble-maps","sourcesContent":["<template>\n  <div class=\"bubble-map fill-height\" />\n</template>\n\n<script>\nimport 'amcharts3'\nimport 'amcharts3/amcharts/plugins/responsive/responsive.js'\nimport 'amcharts3/amcharts/serial.js'\nimport 'amcharts3/amcharts/themes/light'\n\nimport 'ammap3'\nimport 'ammap3/ammap/maps/js/worldLow'\n\nexport default {\n  name: 'bubble-map',\n\n  props: ['mapData'],\n\n  methods: {\n    drawMap () {\n      /* global AmCharts */\n      const minBulletSize = 3\n      const maxBulletSize = 70\n      let min = Infinity\n      let max = -Infinity\n      AmCharts.theme = AmCharts.themes.light\n\n      // get min and max values\n      this.mapData.data.forEach((dataItem) => {\n        const value = dataItem.value\n        if (value < min) {\n          min = value\n        }\n        if (value > max) {\n          max = value\n        }\n      })\n\n      // build map\n      const map = new AmCharts.AmMap()\n\n      map.projection = 'winkel3'\n      map.addTitle('Population of the World in 2011', 14, 1, 1, false)\n      map.addTitle('source: Gapminder', 11, 1, 1, 1, false)\n      map.areasSettings = {\n        unlistedAreasColor: '#eee',\n        unlistedAreasAlpha: 1,\n        outlineColor: '#fff',\n        outlineThickness: 2,\n      }\n      map.imagesSettings = {\n        balloonText: '<span style=\"font-size:14px\"><b>[[title]]</b>: [[value]]</span>',\n        alpha: 0.75,\n      }\n\n      const dataProvider = {\n        mapVar: AmCharts.maps.worldLow,\n        images: [],\n      }\n\n      // create circle for each country\n      // it's better to use circle square to show difference between values, not a radius\n      const maxSquare = maxBulletSize * maxBulletSize * 2 * Math.PI\n      const minSquare = minBulletSize * minBulletSize * 2 * Math.PI\n\n      // create circle for each country\n      this.mapData.data.forEach((dataItem) => {\n        const value = dataItem.value\n        // calculate size of a bubble\n        let square = (value - min) / (max - min) * (maxSquare - minSquare) + minSquare\n        if (square < minSquare) {\n          square = minSquare\n        }\n        const size = Math.sqrt(square / (Math.PI * 2))\n        const id = dataItem.code\n        dataProvider.images.push({\n          type: 'circle',\n          width: size,\n          height: size,\n          color: dataItem.color,\n          longitude: this.mapData.latlong[id].longitude,\n          latitude: this.mapData.latlong[id].latitude,\n          title: dataItem.name,\n          value: value,\n        })\n      })\n\n      map.dataProvider = dataProvider\n      map.write(this.$el)\n    },\n  },\n\n  mounted () {\n    this.drawMap()\n  },\n}\n</script>\n"]}]}