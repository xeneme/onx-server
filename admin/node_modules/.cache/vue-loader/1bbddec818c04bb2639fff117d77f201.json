{"remainingRequest":"/mnt/c/Users/PC_CREATOR/Documents/03backup/_DEV/_CUSTOMERS'_STUFF/vuestic-admin-2.1/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/mnt/c/Users/PC_CREATOR/Documents/03backup/_DEV/_CUSTOMERS'_STUFF/vuestic-admin-2.1/node_modules/cache-loader/dist/cjs.js??ref--0-0!/mnt/c/Users/PC_CREATOR/Documents/03backup/_DEV/_CUSTOMERS'_STUFF/vuestic-admin-2.1/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/c/Users/PC_CREATOR/Documents/03backup/_DEV/_CUSTOMERS'_STUFF/vuestic-admin-2.1/node_modules/vuestic-ui/src/components/vuestic-components/va-select/VaSelect.vue?vue&type=template&id=6784842f&","dependencies":[{"path":"/mnt/c/Users/PC_CREATOR/Documents/03backup/_DEV/_CUSTOMERS'_STUFF/vuestic-admin-2.1/node_modules/vuestic-ui/src/components/vuestic-components/va-select/VaSelect.vue","mtime":499162500000},{"path":"/mnt/c/Users/PC_CREATOR/Documents/03backup/_DEV/_CUSTOMERS'_STUFF/vuestic-admin-2.1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/PC_CREATOR/Documents/03backup/_DEV/_CUSTOMERS'_STUFF/vuestic-admin-2.1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/mnt/c/Users/PC_CREATOR/Documents/03backup/_DEV/_CUSTOMERS'_STUFF/vuestic-admin-2.1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/PC_CREATOR/Documents/03backup/_DEV/_CUSTOMERS'_STUFF/vuestic-admin-2.1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}