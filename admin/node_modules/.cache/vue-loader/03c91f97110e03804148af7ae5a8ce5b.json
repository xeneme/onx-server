{"remainingRequest":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/src/components/dashboard/DashboardUsers.vue?vue&type=style&index=0&id=1063755f&lang=sass&scoped=true&","dependencies":[{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/src/components/dashboard/DashboardUsers.vue","mtime":1604779205822},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5wcm9maWxlX19hdmF0YXIKICBiYWNrZ3JvdW5kOiAjYWVmCiAgd2lkdGg6IDQwcHgKICBoZWlnaHQ6IDQwcHgKICBkaXNwbGF5OiBncmlkCiAgcGxhY2UtaXRlbXM6IGNlbnRlcgogIGJvcmRlci1yYWRpdXM6IDEwMCUKICBwYWRkaW5nLXRvcDogN3B4CiAgb3ZlcmZsb3c6IGhpZGRlbgoKLnVzZXItcm93CiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQKICBjb2xvcjogYmx1ZQogICY6aG92ZXIKICAgIGZpbHRlcjogYnJpZ2h0bmVzcygxLjEpCg=="},{"version":3,"sources":["DashboardUsers.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"DashboardUsers.vue","sourceRoot":"src/components/dashboard","sourcesContent":["<template>\n  <va-card :color=\"computedWidgetColor\" :title=\"$t('dashboard.users.title')\">\n    <va-button\n      slot=\"actions\"\n      color=\"info\"\n      class=\"mr-0\"\n      small\n      flat\n      @click=\"updateUsers\"\n    >\n      <va-icon name=\"material-icons\">autorenew</va-icon>\n    </va-button>\n    <div class=\"row align--center mb-1\">\n      <div class=\"flex xs6 sm6 md6 justify--end\">\n        <va-input\n          class=\"ma-0\"\n          :value=\"term\"\n          :placeholder=\"$t('tables.search')\"\n          @input=\"search\"\n          removable\n        >\n          <va-icon name=\"fa fa-search\" slot=\"prepend\" />\n        </va-input>\n      </div>\n\n      <div class=\"flex xs10 sm10 md4\">\n        <div class=\"d-flex justify--end\">\n          <va-button-toggle\n            outline\n            v-model=\"mode\"\n            :options=\"modeOptions\"\n            style=\"max-width: 100%;\"\n          />\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"loading-wrap\"\n      :style=\"{\n        opacity: loading ? 0.5 : 1,\n      }\"\n    >\n      <va-data-table\n        :fields=\"fields\"\n        :data=\"filteredData\"\n        :loading=\"loading\"\n        rowClass=\"user-row\"\n      >\n        <template v-slot:icon=\"props\">\n          <va-icon\n            :name=\"'fa fa-' + getUserIcon(props.rowData.role)\"\n            color=\"secondary\"\n          />\n        </template>\n        <template v-slot:starred=\"props\">\n          <va-icon\n            v-if=\"props.rowData.starred\"\n            name=\"fa fa-star\"\n            color=\"warning\"\n          />\n        </template>\n        <template v-slot:status=\"props\">\n          <va-badge :color=\"getStatusColor(props.rowData.status === 'online')\">\n            {{ props.rowData.status }}\n          </va-badge>\n        </template>\n\n        <template v-slot:unread=\"props\">\n          <va-button\n            small\n            flat\n            :disabled=\"!props.rowData.unread\"\n            :color=\"props.rowData.unread ? $themes.info : '#00000088'\"\n            @click=\"getUserProfile(props.rowData)\"\n          >\n            {{ props.rowData.unread || '' }}\n            <va-icon name=\"fa fa-envelope\" class=\"ml-1\"></va-icon>\n          </va-button>\n        </template>\n        <template v-slot:profile=\"props\">\n          <va-button\n            :disabled=\"openingProfile\"\n            small\n            outline\n            color=\"info\"\n            @click=\"getUserProfile(props.rowData)\"\n          >\n            {{ $t('dashboard.users.profile') }}\n          </va-button>\n        </template>\n      </va-data-table>\n    </div>\n  </va-card>\n</template>\n\n<script>\nimport debounce from 'lodash/debounce'\nimport { UsersList, UserById, BindUser } from '../../services/Users'\n\nexport default {\n  data() {\n    return {\n      users: [],\n      openedUser: null,\n      loading: false,\n      openingProfile: false,\n      term: null,\n      mode: 0,\n      previousUsers: [],\n      userRequisite: '',\n    }\n  },\n  mounted() {\n    this.updateUsers()\n  },\n  computed: {\n    computedWidgetColor() {\n      return this.$themes.background\n    },\n    fields() {\n      return [\n        {\n          name: '__slot:icon',\n          width: '30px',\n          dataClass: 'text-center',\n        },\n        {\n          name: 'name',\n          title: this.$t('tables.headings.name'),\n          width: '25%',\n        },\n        {\n          name: '__slot:unread',\n          title: this.$t('tables.headings.support'),\n          dataClass: 'text-right',\n        },\n        {\n          name: 'email',\n          title: this.$t('tables.headings.email'),\n          width: '30%',\n        },\n        {\n          name: '__slot:status',\n          title: this.$t('tables.headings.status'),\n          width: '20%',\n          sortField: 'status',\n        },\n        {\n          name: '__slot:profile',\n          dataClass: 'text-right',\n        },\n      ]\n    },\n    modeOptions() {\n      return [\n        {\n          value: 0,\n          label: this.$t('dashboard.users.all'),\n        },\n        {\n          value: 1,\n          label: this.$t('dashboard.users.newMessages'),\n        },\n      ]\n    },\n    filteredData() {\n      var users = this.mode\n        ? this.users.filter(user => user.unread)\n        : this.users\n\n      if (!this.term || this.term.length < 1) {\n        return users\n      } else {\n        return users.filter(item => {\n          return (\n            item.name.toLowerCase().startsWith(this.term.toLowerCase()) ||\n            item.email.toLowerCase().startsWith(this.term.toLowerCase()) ||\n            Object.entries(item)\n              .map(prop =>\n                prop[0] === 'online'\n                  ? prop[1]\n                    ? 'online'\n                    : 'offline'\n                  : prop[1].toString()\n              )\n              .includes(this.term)\n          )\n        })\n      }\n    },\n  },\n  methods: {\n    getUserProfile(user) {\n      if (this.openingProfile) return\n\n      this.openingProfile = true\n      this.$root.$emit('getting-profile')\n      this.$root.$emit('getting-dialogue')\n\n      UserById(user.id)\n        .then(({ data }) => {\n          this.openingProfile = false\n          this.$root.$emit('open-dialogue', { messages: data.messages, user })\n          this.$root.$emit('open-profile', data)\n          this.openedUser = user\n        })\n        .catch(err => {\n          console.log(err)\n          this.openingProfile = false\n          this.$root.$emit('open-profile', {})\n          this.showToast(\n            'Cannot open his profile. Status code ' +\n              (err.response ? err.response.status : '%CODE%'),\n            {\n              icon: 'fa-times',\n              position: 'bottom-center',\n              duration: 4000,\n              type: 'primary',\n            }\n          )\n        })\n    },\n    bindUser() {\n      this.loading = true\n      BindUser(this.userRequisite)\n        .then(() => {\n          this.userRequisite = ''\n          this.updateUsers()\n          this.showToast('The user has been successfully binded!', {\n            icon: 'fa-check',\n            position: 'bottom-right',\n            duration: 4000,\n            type: 'success',\n          })\n        })\n        .catch(err => {\n          this.loading = false\n          this.showToast(\n            'The user has not been binded. Status code ' +\n              (err.response ? err.response.status : '%CODE%'),\n            {\n              icon: 'fa-times',\n              position: 'bottom-right',\n              duration: 4000,\n              type: 'primary',\n            }\n          )\n        })\n    },\n    checkNewMessages() {\n      var self = this\n      UsersList()\n        .then(({ data }) => {\n          this.previousUsers = this.users\n          this.users = data\n\n          for (let i = 0; i < data.length; i++) {\n            if (this.previousUsers[i] && data[i]) {\n              if (this.previousUsers[i].unread < data[i].unread) {\n                new Audio('./sounds/message.wav').play()\n                break\n              }\n            }\n          }\n\n          setTimeout(() => {\n            self.checkNewMessages()\n          }, 5000)\n        })\n        .catch(() => {\n          setTimeout(() => {\n            self.checkNewMessages()\n          }, 30000)\n        })\n    },\n    updateUsers() {\n      this.loading = true\n\n      UsersList()\n        .then(({ data }) => {\n          this.loading = false\n          this.previousUsers = this.users\n          this.users = data\n        })\n        .catch(err => {\n          this.loading = false\n          this.showToast(\n            'There was an error when trying to fetch the users list. Status code ' +\n              (err.response ? err.response.status : '%CODE%'),\n            {\n              icon: 'fa-times',\n              position: 'bottom-center',\n              duration: 4000,\n              type: 'primary',\n            }\n          )\n        })\n    },\n    getUserIcon(role) {\n      return ['user', 'user-secret'][+(role !== 'user')]\n    },\n    getStatusColor(status) {\n      return ['danger', 'success'][+status]\n    },\n    readSupport(id) {\n      this.users.forEach(user => {\n        if ((user.id = id)) user.unread = 0\n      })\n    },\n    search: debounce(function(term) {\n      this.term = term\n    }, 400),\n  },\n  created() {\n    this.$root.$on('update-users', this.updateUsers)\n  },\n  mounted() {\n    var self = this\n    this.updateUsers()\n    setTimeout(() => {\n      self.checkNewMessages()\n    }, 10000)\n  },\n  destroy() {\n    this.$root.$off('update-users', this.updateUsers)\n  },\n}\n</script>\n\n<style lang=\"sass\" scoped>\n\n.profile__avatar\n  background: #aef\n  width: 40px\n  height: 40px\n  display: grid\n  place-items: center\n  border-radius: 100%\n  padding-top: 7px\n  overflow: hidden\n\n.user-row\n  background-color: transparent\n  color: blue\n  &:hover\n    filter: brightness(1.1)\n</style>\n"]}]}