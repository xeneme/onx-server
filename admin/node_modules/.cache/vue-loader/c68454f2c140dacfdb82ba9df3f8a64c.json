{"remainingRequest":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/src/components/dashboard/DashboardDialogues.vue?vue&type=style&index=0&lang=sass&","dependencies":[{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/src/components/dashboard/DashboardDialogues.vue","mtime":1604779146008},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/clean-vuestic/2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnByb2ZpbGVfX2F2YXRhcgogIGJhY2tncm91bmQ6ICNhZWYKICB3aWR0aDogNDBweAogIGhlaWdodDogNDBweAogIGRpc3BsYXk6IGdyaWQKICBwbGFjZS1pdGVtczogY2VudGVyCiAgYm9yZGVyLXJhZGl1czogMTAwJQogIHBhZGRpbmctdG9wOiA3cHgKICBvdmVyZmxvdzogaGlkZGVuCgoudXNlci1yb3c6bnRoLWNoaWxkKG9kZCkKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmMDQK"},{"version":3,"sources":["DashboardDialogues.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"DashboardDialogues.vue","sourceRoot":"src/components/dashboard","sourcesContent":["<template>\n  <va-card\n    :color=\"computedWidgetColor\"\n    :title=\"$t('dashboard.support.dialogues')\"\n  >\n    <va-button\n      slot=\"actions\"\n      color=\"info\"\n      class=\"mr-0\"\n      small\n      flat\n      @click=\"updateDialogues\"\n    >\n      <va-icon name=\"material-icons\">autorenew</va-icon>\n    </va-button>\n    <div class=\"row align--center mb-1\">\n      <div class=\"flex xs12 sm12 md12\">\n        <va-input\n          class=\"ma-0\"\n          :value=\"term\"\n          :placeholder=\"$t('tables.searchByName')\"\n          @input=\"search\"\n          removable\n        >\n          <va-icon name=\"fa fa-search\" slot=\"prepend\" />\n        </va-input>\n      </div>\n    </div>\n\n    <va-data-table\n      :fields=\"fields\"\n      :data=\"filteredData\"\n      :loading=\"loading\"\n      rowClass=\"user-row\"\n    >\n      <template v-slot:icon>\n        <va-icon\n          :name=\"'fa fa-user'\"\n          color=\"secondary\"\n        />\n      </template>\n      <template v-slot:starred=\"props\">\n        <va-icon\n          v-if=\"props.rowData.starred\"\n          name=\"fa fa-star\"\n          color=\"warning\"\n        />\n      </template>\n      <template v-slot:online=\"props\">\n        <va-badge :color=\"getStatusColor(props.rowData.online)\">\n          {{ Boolean(props.rowData.online) ? 'online' : 'offline' }}\n        </va-badge>\n      </template>\n\n      <template v-slot:messagesCount=\"props\">\n        <va-button small flat color=\"info\" @click=\"openDialogue\">\n          {{ props.rowData.messagesCount }}\n          <va-icon name=\"fa fa-envelope\" class=\"ml-1\"></va-icon>\n        </va-button>\n      </template>\n    </va-data-table>\n  </va-card>\n</template>\n\n<script>\nimport debounce from 'lodash/debounce'\nimport data from '../markup-tables/data2.json'\n\nexport default {\n  data() {\n    return {\n      users: data.map(u => {\n        u.name = u.firstName + ' ' + u.lastName\n        return u\n      }),\n      loading: false,\n      term: null,\n      mode: 0,\n      userRequisite: '',\n    }\n  },\n  mounted() {\n    // this.updateDialogues()\n  },\n  computed: {\n    computedWidgetColor() {\n      return this.$themes.background\n    },\n    fields() {\n      return [\n        {\n          name: '__slot:icon',\n          width: '30px',\n          dataClass: 'text-center',\n        },\n        {\n          name: 'name',\n          title: this.$t('tables.headings.name'),\n          width: '30%',\n        },\n        {\n          name: 'email',\n          title: this.$t('tables.headings.email'),\n          width: '50%',\n        },\n        {\n          name: '__slot:online',\n          title: this.$t('tables.headings.status'),\n          width: '10%',\n        },\n        {\n          name: '__slot:messagesCount',\n          dataClass: 'text-right',\n          sortField: 'online',\n        },\n      ]\n    },\n    filteredData() {\n      if (!this.term || this.term.length < 1) {\n        return this.users\n      }\n\n      return this.users.filter(item => {\n        return (\n          item.name.toLowerCase().startsWith(this.term.toLowerCase()) ||\n          item.email.toLowerCase().startsWith(this.term.toLowerCase()) ||\n          Object.entries(item)\n            .map(prop =>\n              prop[0] === 'online'\n                ? prop[1]\n                  ? 'online'\n                  : 'offline'\n                : prop[1].toString()\n            )\n            .includes(this.term)\n        )\n      })\n    },\n  },\n  methods: {\n    updateDialogues() {\n      this.loading = true\n\n      UsersList()\n        .then(({ data }) => {\n          this.loading = false\n          this.users = data\n        })\n        .catch(err => {\n          this.loading = false\n          this.showToast(\n            'There was an error when trying to fetch the users list. Status code ' +\n              (err.response ? err.response.status : '%CODE%'),\n            {\n              icon: 'fa-times',\n              position: 'bottom-center',\n              duration: 4000,\n              type: 'primary',\n            }\n          )\n        })\n    },\n    getStatusColor(status) {\n      return ['danger', 'success'][+status]\n    },\n    search: debounce(function(term) {\n      this.term = term\n    }, 400),\n  },\n}\n</script>\n\n<style lang=\"sass\">\n\n.profile__avatar\n  background: #aef\n  width: 40px\n  height: 40px\n  display: grid\n  place-items: center\n  border-radius: 100%\n  padding-top: 7px\n  overflow: hidden\n\n.user-row:nth-child(odd)\n  background-color: #ffffff04\n</style>\n"]}]}