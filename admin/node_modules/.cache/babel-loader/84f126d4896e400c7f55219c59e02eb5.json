{"remainingRequest":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/thread-loader/dist/cjs.js!/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/babel-loader/lib/index.js!/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/vuestic-ui/node_modules/popper.js/dist/esm/popper.js","dependencies":[{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/vuestic-ui/node_modules/popper.js/dist/esm/popper.js","mtime":1579706838000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmV2ZXJzZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5iaW5kIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1mbG9hdCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWludCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0iOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycyI7CgovKiohCiAqIEBmaWxlT3ZlcnZpZXcgS2lja2FzcyBsaWJyYXJ5IHRvIGNyZWF0ZSBhbmQgcGxhY2UgcG9wcGVycyBuZWFyIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50cy4KICogQHZlcnNpb24gMS4xNi4xCiAqIEBsaWNlbnNlCiAqIENvcHlyaWdodCAoYykgMjAxNiBGZWRlcmljbyBaaXZvbG8gYW5kIGNvbnRyaWJ1dG9ycwogKgogKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5CiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsCiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbAogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKICoKICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsCiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCiAqCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SCiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAogKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgogKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLAogKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRQogKiBTT0ZUV0FSRS4KICovCnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnOwoKdmFyIHRpbWVvdXREdXJhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICB2YXIgbG9uZ2VyVGltZW91dEJyb3dzZXJzID0gWydFZGdlJywgJ1RyaWRlbnQnLCAnRmlyZWZveCddOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkgewogICAgaWYgKGlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7CiAgICAgIHJldHVybiAxOwogICAgfQogIH0KCiAgcmV0dXJuIDA7Cn0oKTsKCmZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7CiAgdmFyIGNhbGxlZCA9IGZhbHNlOwogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICBpZiAoY2FsbGVkKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBjYWxsZWQgPSB0cnVlOwogICAgd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICBjYWxsZWQgPSBmYWxzZTsKICAgICAgZm4oKTsKICAgIH0pOwogIH07Cn0KCmZ1bmN0aW9uIHRhc2tEZWJvdW5jZShmbikgewogIHZhciBzY2hlZHVsZWQgPSBmYWxzZTsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgaWYgKCFzY2hlZHVsZWQpIHsKICAgICAgc2NoZWR1bGVkID0gdHJ1ZTsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7CiAgICAgICAgZm4oKTsKICAgICAgfSwgdGltZW91dER1cmF0aW9uKTsKICAgIH0KICB9Owp9Cgp2YXIgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyICYmIHdpbmRvdy5Qcm9taXNlOwovKioKKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkCiogYnV0IGNhbGxlZCBpbiB0aGUgbWluaW11bSB0aW1lIHBvc3NpYmxlLgoqCiogQG1ldGhvZAoqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmbgoqIEByZXR1cm5zIHtGdW5jdGlvbn0KKi8KCnZhciBkZWJvdW5jZSA9IHN1cHBvcnRzTWljcm9UYXNrcyA/IG1pY3JvdGFza0RlYm91bmNlIDogdGFza0RlYm91bmNlOwovKioKICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb24KICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVjawogKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uPwogKi8KCmZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY3Rpb25Ub0NoZWNrKSB7CiAgdmFyIGdldFR5cGUgPSB7fTsKICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nOwp9Ci8qKgogKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50CiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudAogKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHkKICovCgoKZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7CiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHsKICAgIHJldHVybiBbXTsKICB9IC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlCgoKICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3OwogIHZhciBjc3MgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTsKICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzOwp9Ci8qKgogKiBSZXR1cm5zIHRoZSBwYXJlbnROb2RlIG9yIHRoZSBob3N0IG9mIHRoZSBlbGVtZW50CiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQKICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudAogKi8KCgpmdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHsKICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7CiAgICByZXR1cm4gZWxlbWVudDsKICB9CgogIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0Owp9Ci8qKgogKiBSZXR1cm5zIHRoZSBzY3JvbGxpbmcgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50CiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQKICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnQKICovCgoKZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHsKICAvLyBSZXR1cm4gYm9keSwgYGdldFNjcm9sbGAgd2lsbCB0YWtlIGNhcmUgdG8gZ2V0IHRoZSBjb3JyZWN0IGBzY3JvbGxUb3BgIGZyb20gaXQKICBpZiAoIWVsZW1lbnQpIHsKICAgIHJldHVybiBkb2N1bWVudC5ib2R5OwogIH0KCiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7CiAgICBjYXNlICdIVE1MJzoKICAgIGNhc2UgJ0JPRFknOgogICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7CgogICAgY2FzZSAnI2RvY3VtZW50JzoKICAgICAgcmV0dXJuIGVsZW1lbnQuYm9keTsKICB9IC8vIEZpcmVmb3ggd2FudCB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbAoKCiAgdmFyIF9nZXRTdHlsZUNvbXB1dGVkUHJvcCA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KSwKICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csCiAgICAgIG92ZXJmbG93WCA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1gsCiAgICAgIG92ZXJmbG93WSA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1k7CgogIGlmICgvKGF1dG98c2Nyb2xsfG92ZXJsYXkpLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKSkgewogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfQoKICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUoZWxlbWVudCkpOwp9Ci8qKgogKiBSZXR1cm5zIHRoZSByZWZlcmVuY2Ugbm9kZSBvZiB0aGUgcmVmZXJlbmNlIG9iamVjdCwgb3IgdGhlIHJlZmVyZW5jZSBvYmplY3QgaXRzZWxmLgogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcykKICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudAogKi8KCgpmdW5jdGlvbiBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkgewogIHJldHVybiByZWZlcmVuY2UgJiYgcmVmZXJlbmNlLnJlZmVyZW5jZU5vZGUgPyByZWZlcmVuY2UucmVmZXJlbmNlTm9kZSA6IHJlZmVyZW5jZTsKfQoKdmFyIGlzSUUxMSA9IGlzQnJvd3NlciAmJiAhISh3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTsKdmFyIGlzSUUxMCA9IGlzQnJvd3NlciAmJiAvTVNJRSAxMC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsKLyoqCiAqIERldGVybWluZXMgaWYgdGhlIGJyb3dzZXIgaXMgSW50ZXJuZXQgRXhwbG9yZXIKICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIHRvIGNoZWNrCiAqIEByZXR1cm5zIHtCb29sZWFufSBpc0lFCiAqLwoKZnVuY3Rpb24gaXNJRSh2ZXJzaW9uKSB7CiAgaWYgKHZlcnNpb24gPT09IDExKSB7CiAgICByZXR1cm4gaXNJRTExOwogIH0KCiAgaWYgKHZlcnNpb24gPT09IDEwKSB7CiAgICByZXR1cm4gaXNJRTEwOwogIH0KCiAgcmV0dXJuIGlzSUUxMSB8fCBpc0lFMTA7Cn0KLyoqCiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnQKICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudAogKiBAcmV0dXJucyB7RWxlbWVudH0gb2Zmc2V0IHBhcmVudAogKi8KCgpmdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkgewogIGlmICghZWxlbWVudCkgewogICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKICB9CgogIHZhciBub09mZnNldFBhcmVudCA9IGlzSUUoMTApID8gZG9jdW1lbnQuYm9keSA6IG51bGw7IC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlCgogIHZhciBvZmZzZXRQYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudCB8fCBudWxsOyAvLyBTa2lwIGhpZGRlbiBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGFuIG9mZnNldFBhcmVudAoKICB3aGlsZSAob2Zmc2V0UGFyZW50ID09PSBub09mZnNldFBhcmVudCAmJiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykgewogICAgb2Zmc2V0UGFyZW50ID0gKGVsZW1lbnQgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykub2Zmc2V0UGFyZW50OwogIH0KCiAgdmFyIG5vZGVOYW1lID0gb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudC5ub2RlTmFtZTsKCiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHsKICAgIHJldHVybiBlbGVtZW50ID8gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKICB9IC8vIC5vZmZzZXRQYXJlbnQgd2lsbCByZXR1cm4gdGhlIGNsb3Nlc3QgVEgsIFREIG9yIFRBQkxFIGluIGNhc2UKICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uCgoKICBpZiAoWydUSCcsICdURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7CiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7CiAgfQoKICByZXR1cm4gb2Zmc2V0UGFyZW50Owp9CgpmdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7CiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTsKCiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHJldHVybiBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudDsKfQovKioKICogRmluZHMgdGhlIHJvb3Qgbm9kZSAoZG9jdW1lbnQsIHNoYWRvd0RPTSByb290KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudAogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQGFyZ3VtZW50IHtFbGVtZW50fSBub2RlCiAqIEByZXR1cm5zIHtFbGVtZW50fSByb290IG5vZGUKICovCgoKZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7CiAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkgewogICAgcmV0dXJuIGdldFJvb3Qobm9kZS5wYXJlbnROb2RlKTsKICB9CgogIHJldHVybiBub2RlOwp9Ci8qKgogKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2RlcwogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MQogKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQyCiAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudAogKi8KCgpmdW5jdGlvbiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBlbGVtZW50MikgewogIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvbgogIGlmICghZWxlbWVudDEgfHwgIWVsZW1lbnQxLm5vZGVUeXBlIHx8ICFlbGVtZW50MiB8fCAhZWxlbWVudDIubm9kZVR5cGUpIHsKICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CiAgfSAvLyBIZXJlIHdlIG1ha2Ugc3VyZSB0byBnaXZlIGFzICJzdGFydCIgdGhlIGVsZW1lbnQgdGhhdCBjb21lcyBmaXJzdCBpbiB0aGUgRE9NCgoKICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORzsKICB2YXIgc3RhcnQgPSBvcmRlciA/IGVsZW1lbnQxIDogZWxlbWVudDI7CiAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTsgLy8gR2V0IGNvbW1vbiBhbmNlc3RvciBjb250YWluZXIKCiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTsKICByYW5nZS5zZXRTdGFydChzdGFydCwgMCk7CiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7CiAgdmFyIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7IC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnQKCiAgaWYgKGVsZW1lbnQxICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciAmJiBlbGVtZW50MiAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgfHwgc3RhcnQuY29udGFpbnMoZW5kKSkgewogICAgaWYgKGlzT2Zmc2V0Q29udGFpbmVyKGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkgewogICAgICByZXR1cm4gY29tbW9uQW5jZXN0b3JDb250YWluZXI7CiAgICB9CgogICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChjb21tb25BbmNlc3RvckNvbnRhaW5lcik7CiAgfSAvLyBvbmUgb2YgdGhlIG5vZGVzIGlzIGluc2lkZSBzaGFkb3dET00sIGZpbmQgd2hpY2ggb25lCgoKICB2YXIgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7CgogIGlmIChlbGVtZW50MXJvb3QuaG9zdCkgewogICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDFyb290Lmhvc3QsIGVsZW1lbnQyKTsKICB9IGVsc2UgewogICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpOwogIH0KfQovKioKICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpCiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQKICogQGFyZ3VtZW50IHtTdHJpbmd9IHNpZGUgYHRvcGAgb3IgYGxlZnRgCiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHMKICovCgoKZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsZW1lbnQpIHsKICB2YXIgc2lkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3RvcCc7CiAgdmFyIHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7CiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTsKCiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykgewogICAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwogICAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBodG1sOwogICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnRbdXBwZXJTaWRlXTsKICB9CgogIHJldHVybiBlbGVtZW50W3VwcGVyU2lkZV07Cn0KLyoKICogU3VtIG9yIHN1YnRyYWN0IHRoZSBlbGVtZW50IHNjcm9sbCB2YWx1ZXMgKGxlZnQgYW5kIHRvcCkgZnJvbSBhIGdpdmVuIHJlY3Qgb2JqZWN0CiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAcGFyYW0ge09iamVjdH0gcmVjdCAtIFJlY3Qgb2JqZWN0IHlvdSB3YW50IHRvIGNoYW5nZQogKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXMKICogQHBhcmFtIHtCb29sZWFufSBzdWJ0cmFjdCAtIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIHN1YnRyYWN0IHRoZSBzY3JvbGwgdmFsdWVzCiAqIEByZXR1cm4ge09iamVjdH0gcmVjdCAtIFRoZSBtb2RpZmllciByZWN0IG9iamVjdAogKi8KCgpmdW5jdGlvbiBpbmNsdWRlU2Nyb2xsKHJlY3QsIGVsZW1lbnQpIHsKICB2YXIgc3VidHJhY3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlOwogIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpOwogIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7CiAgdmFyIG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7CiAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7CiAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7CiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjsKICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjsKICByZXR1cm4gcmVjdDsKfQovKgogKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50CiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlcwogKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnQKICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgCiAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXMKICovCgoKZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7CiAgdmFyIHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7CiAgdmFyIHNpZGVCID0gc2lkZUEgPT09ICdMZWZ0JyA/ICdSaWdodCcgOiAnQm90dG9tJzsKICByZXR1cm4gcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQSArICdXaWR0aCddKSArIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUIgKyAnV2lkdGgnXSk7Cn0KCmZ1bmN0aW9uIGdldFNpemUoYXhpcywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSkgewogIHJldHVybiBNYXRoLm1heChib2R5WydvZmZzZXQnICsgYXhpc10sIGJvZHlbJ3Njcm9sbCcgKyBheGlzXSwgaHRtbFsnY2xpZW50JyArIGF4aXNdLCBodG1sWydvZmZzZXQnICsgYXhpc10sIGh0bWxbJ3Njcm9sbCcgKyBheGlzXSwgaXNJRSgxMCkgPyBwYXJzZUludChodG1sWydvZmZzZXQnICsgYXhpc10pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdUb3AnIDogJ0xlZnQnKV0pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdCb3R0b20nIDogJ1JpZ2h0JyldKSA6IDApOwp9CgpmdW5jdGlvbiBnZXRXaW5kb3dTaXplcyhkb2N1bWVudCkgewogIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTsKICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKICB2YXIgY29tcHV0ZWRTdHlsZSA9IGlzSUUoMTApICYmIGdldENvbXB1dGVkU3R5bGUoaHRtbCk7CiAgcmV0dXJuIHsKICAgIGhlaWdodDogZ2V0U2l6ZSgnSGVpZ2h0JywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSksCiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKQogIH07Cn0KCnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIGNsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn07Cgp2YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogICAgfQogIH0KCiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICAgIHJldHVybiBDb25zdHJ1Y3RvcjsKICB9Owp9KCk7Cgp2YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9OwoKdmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07CgogICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgewogICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgewogICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn07Ci8qKgogKiBHaXZlbiBlbGVtZW50IG9mZnNldHMsIGdlbmVyYXRlIGFuIG91dHB1dCBzaW1pbGFyIHRvIGdldEJvdW5kaW5nQ2xpZW50UmVjdAogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQGFyZ3VtZW50IHtPYmplY3R9IG9mZnNldHMKICogQHJldHVybnMge09iamVjdH0gQ2xpZW50UmVjdCBsaWtlIG91dHB1dAogKi8KCgpmdW5jdGlvbiBnZXRDbGllbnRSZWN0KG9mZnNldHMpIHsKICByZXR1cm4gX2V4dGVuZHMoe30sIG9mZnNldHMsIHsKICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLAogICAgYm90dG9tOiBvZmZzZXRzLnRvcCArIG9mZnNldHMuaGVpZ2h0CiAgfSk7Cn0KLyoqCiAqIEdldCBib3VuZGluZyBjbGllbnQgcmVjdCBvZiBnaXZlbiBlbGVtZW50CiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50CiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3QKICovCgoKZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHsKICB2YXIgcmVjdCA9IHt9OyAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0CiAgLy8gY29uc2lkZXJlZCBpbiBET00gaW4gc29tZSBjaXJjdW1zdGFuY2VzLi4uCiAgLy8gVGhpcyBpc24ndCByZXByb2R1Y2libGUgaW4gSUUxMCBjb21wYXRpYmlsaXR5IG1vZGUgb2YgSUUxMQoKICB0cnkgewogICAgaWYgKGlzSUUoMTApKSB7CiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTsKICAgICAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTsKICAgICAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wOwogICAgICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdDsKICAgICAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wOwogICAgICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQ7CiAgICB9IGVsc2UgewogICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICAgIH0KICB9IGNhdGNoIChlKSB7fQoKICB2YXIgcmVzdWx0ID0gewogICAgbGVmdDogcmVjdC5sZWZ0LAogICAgdG9wOiByZWN0LnRvcCwKICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LAogICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wCiAgfTsgLy8gc3VidHJhY3Qgc2Nyb2xsYmFyIHNpemUgZnJvbSBzaXplcwoKICB2YXIgc2l6ZXMgPSBlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgPyBnZXRXaW5kb3dTaXplcyhlbGVtZW50Lm93bmVyRG9jdW1lbnQpIDoge307CiAgdmFyIHdpZHRoID0gc2l6ZXMud2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCB8fCByZXN1bHQud2lkdGg7CiAgdmFyIGhlaWdodCA9IHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuaGVpZ2h0OwogIHZhciBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDsKICB2YXIgdmVydFNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gaGVpZ2h0OyAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYAogIC8vIHdlIG1ha2UgdGhpcyBjaGVjayBjb25kaXRpb25hbCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucwoKICBpZiAoaG9yaXpTY3JvbGxiYXIgfHwgdmVydFNjcm9sbGJhcikgewogICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTsKICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTsKICAgIHZlcnRTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneScpOwogICAgcmVzdWx0LndpZHRoIC09IGhvcml6U2Nyb2xsYmFyOwogICAgcmVzdWx0LmhlaWdodCAtPSB2ZXJ0U2Nyb2xsYmFyOwogIH0KCiAgcmV0dXJuIGdldENsaWVudFJlY3QocmVzdWx0KTsKfQoKZnVuY3Rpb24gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGNoaWxkcmVuLCBwYXJlbnQpIHsKICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7CiAgdmFyIGlzSUUxMCA9IGlzSUUoMTApOwogIHZhciBpc0hUTUwgPSBwYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJzsKICB2YXIgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTsKICB2YXIgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpOwogIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoY2hpbGRyZW4pOwogIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkocGFyZW50KTsKICB2YXIgYm9yZGVyVG9wV2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJUb3BXaWR0aCk7CiAgdmFyIGJvcmRlckxlZnRXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlckxlZnRXaWR0aCk7IC8vIEluIGNhc2VzIHdoZXJlIHRoZSBwYXJlbnQgaXMgZml4ZWQsIHdlIG11c3QgaWdub3JlIG5lZ2F0aXZlIHNjcm9sbCBpbiBvZmZzZXQgY2FsYwoKICBpZiAoZml4ZWRQb3NpdGlvbiAmJiBpc0hUTUwpIHsKICAgIHBhcmVudFJlY3QudG9wID0gTWF0aC5tYXgocGFyZW50UmVjdC50b3AsIDApOwogICAgcGFyZW50UmVjdC5sZWZ0ID0gTWF0aC5tYXgocGFyZW50UmVjdC5sZWZ0LCAwKTsKICB9CgogIHZhciBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7CiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLAogICAgbGVmdDogY2hpbGRyZW5SZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQgLSBib3JkZXJMZWZ0V2lkdGgsCiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLAogICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0CiAgfSk7CiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwOwogIG9mZnNldHMubWFyZ2luTGVmdCA9IDA7IC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudAogIC8vIHdlIGRvIHRoaXMgb25seSBvbiBIVE1MIGJlY2F1c2UgaXQncyB0aGUgb25seSBlbGVtZW50IHRoYXQgYmVoYXZlcwogIC8vIGRpZmZlcmVudGx5IHdoZW4gbWFyZ2lucyBhcmUgYXBwbGllZCB0byBpdC4gVGhlIG1hcmdpbnMgYXJlIGluY2x1ZGVkIGluCiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LgoKICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHsKICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3ApOwogICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0KTsKICAgIG9mZnNldHMudG9wIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wOwogICAgb2Zmc2V0cy5ib3R0b20gLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7CiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDsKICAgIG9mZnNldHMucmlnaHQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDsgLy8gQXR0YWNoIG1hcmdpblRvcCBhbmQgbWFyZ2luTGVmdCBiZWNhdXNlIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyB3ZSBtYXkgbmVlZCB0aGVtCgogICAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3A7CiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0OwogIH0KCiAgaWYgKGlzSUUxMCAmJiAhZml4ZWRQb3NpdGlvbiA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHsKICAgIG9mZnNldHMgPSBpbmNsdWRlU2Nyb2xsKG9mZnNldHMsIHBhcmVudCk7CiAgfQoKICByZXR1cm4gb2Zmc2V0czsKfQoKZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKGVsZW1lbnQpIHsKICB2YXIgZXhjbHVkZVNjcm9sbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7CiAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwogIHZhciByZWxhdGl2ZU9mZnNldCA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShlbGVtZW50LCBodG1sKTsKICB2YXIgd2lkdGggPSBNYXRoLm1heChodG1sLmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTsKICB2YXIgaGVpZ2h0ID0gTWF0aC5tYXgoaHRtbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTsKICB2YXIgc2Nyb2xsVG9wID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCkgOiAwOwogIHZhciBzY3JvbGxMZWZ0ID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKSA6IDA7CiAgdmFyIG9mZnNldCA9IHsKICAgIHRvcDogc2Nyb2xsVG9wIC0gcmVsYXRpdmVPZmZzZXQudG9wICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luVG9wLAogICAgbGVmdDogc2Nyb2xsTGVmdCAtIHJlbGF0aXZlT2Zmc2V0LmxlZnQgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5MZWZ0LAogICAgd2lkdGg6IHdpZHRoLAogICAgaGVpZ2h0OiBoZWlnaHQKICB9OwogIHJldHVybiBnZXRDbGllbnRSZWN0KG9mZnNldCk7Cn0KLyoqCiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudAogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50CiAqIEBhcmd1bWVudCB7RWxlbWVudH0gY3VzdG9tQ29udGFpbmVyCiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG8gImlzRml4ZWQ/IgogKi8KCgpmdW5jdGlvbiBpc0ZpeGVkKGVsZW1lbnQpIHsKICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lOwoKICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpZiAoZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIHZhciBwYXJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTsKCiAgaWYgKCFwYXJlbnROb2RlKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICByZXR1cm4gaXNGaXhlZChwYXJlbnROb2RlKTsKfQovKioKICogRmluZHMgdGhlIGZpcnN0IHBhcmVudCBvZiBhbiBlbGVtZW50IHRoYXQgaGFzIGEgdHJhbnNmb3JtZWQgcHJvcGVydHkgZGVmaW5lZAogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50CiAqIEByZXR1cm5zIHtFbGVtZW50fSBmaXJzdCB0cmFuc2Zvcm1lZCBwYXJlbnQgb3IgZG9jdW1lbnRFbGVtZW50CiAqLwoKCmZ1bmN0aW9uIGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQoZWxlbWVudCkgewogIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvbgogIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5wYXJlbnRFbGVtZW50IHx8IGlzSUUoKSkgewogICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKICB9CgogIHZhciBlbCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDsKCiAgd2hpbGUgKGVsICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScpIHsKICAgIGVsID0gZWwucGFyZW50RWxlbWVudDsKICB9CgogIHJldHVybiBlbCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7Cn0KLyoqCiAqIENvbXB1dGVkIHRoZSBib3VuZGFyaWVzIGxpbWl0cyBhbmQgcmV0dXJuIHRoZW0KICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlcgogKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UKICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmcKICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQgLSBFbGVtZW50IHVzZWQgdG8gZGVmaW5lIHRoZSBib3VuZGFyaWVzCiAqIEBwYXJhbSB7Qm9vbGVhbn0gZml4ZWRQb3NpdGlvbiAtIElzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGUKICogQHJldHVybnMge09iamVjdH0gQ29vcmRpbmF0ZXMgb2YgdGhlIGJvdW5kYXJpZXMKICovCgoKZnVuY3Rpb24gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpIHsKICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7IC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlCgogIHZhciBib3VuZGFyaWVzID0gewogICAgdG9wOiAwLAogICAgbGVmdDogMAogIH07CiAgdmFyIG9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgZ2V0UmVmZXJlbmNlTm9kZShyZWZlcmVuY2UpKTsgLy8gSGFuZGxlIHZpZXdwb3J0IGNhc2UKCiAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAndmlld3BvcnQnKSB7CiAgICBib3VuZGFyaWVzID0gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7CiAgfSBlbHNlIHsKICAgIC8vIEhhbmRsZSBvdGhlciBjYXNlcyBiYXNlZCBvbiBET00gZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXMKICAgIHZhciBib3VuZGFyaWVzTm9kZSA9IHZvaWQgMDsKCiAgICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICdzY3JvbGxQYXJlbnQnKSB7CiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocmVmZXJlbmNlKSk7CgogICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykgewogICAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwogICAgICB9CiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93JykgewogICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKICAgIH0gZWxzZSB7CiAgICAgIGJvdW5kYXJpZXNOb2RlID0gYm91bmRhcmllc0VsZW1lbnQ7CiAgICB9CgogICAgdmFyIG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoYm91bmRhcmllc05vZGUsIG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7IC8vIEluIGNhc2Ugb2YgSFRNTCwgd2UgbmVlZCBhIGRpZmZlcmVudCBjb21wdXRhdGlvbgoKICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnICYmICFpc0ZpeGVkKG9mZnNldFBhcmVudCkpIHsKICAgICAgdmFyIF9nZXRXaW5kb3dTaXplcyA9IGdldFdpbmRvd1NpemVzKHBvcHBlci5vd25lckRvY3VtZW50KSwKICAgICAgICAgIGhlaWdodCA9IF9nZXRXaW5kb3dTaXplcy5oZWlnaHQsCiAgICAgICAgICB3aWR0aCA9IF9nZXRXaW5kb3dTaXplcy53aWR0aDsKCiAgICAgIGJvdW5kYXJpZXMudG9wICs9IG9mZnNldHMudG9wIC0gb2Zmc2V0cy5tYXJnaW5Ub3A7CiAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7CiAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7CiAgICAgIGJvdW5kYXJpZXMucmlnaHQgPSB3aWR0aCArIG9mZnNldHMubGVmdDsKICAgIH0gZWxzZSB7CiAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZAogICAgICBib3VuZGFyaWVzID0gb2Zmc2V0czsKICAgIH0KICB9IC8vIEFkZCBwYWRkaW5ncwoKCiAgcGFkZGluZyA9IHBhZGRpbmcgfHwgMDsKICB2YXIgaXNQYWRkaW5nTnVtYmVyID0gdHlwZW9mIHBhZGRpbmcgPT09ICdudW1iZXInOwogIGJvdW5kYXJpZXMubGVmdCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5sZWZ0IHx8IDA7CiAgYm91bmRhcmllcy50b3AgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcudG9wIHx8IDA7CiAgYm91bmRhcmllcy5yaWdodCAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5yaWdodCB8fCAwOwogIGJvdW5kYXJpZXMuYm90dG9tIC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmJvdHRvbSB8fCAwOwogIHJldHVybiBib3VuZGFyaWVzOwp9CgpmdW5jdGlvbiBnZXRBcmVhKF9yZWYpIHsKICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLAogICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDsKICByZXR1cm4gd2lkdGggKiBoZWlnaHQ7Cn0KLyoqCiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmUKICogYXZhaWxhYmxlIHNwYWNlLgogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2QKICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9ucwogKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkCiAqLwoKCmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHBsYWNlbWVudCwgcmVmUmVjdCwgcG9wcGVyLCByZWZlcmVuY2UsIGJvdW5kYXJpZXNFbGVtZW50KSB7CiAgdmFyIHBhZGRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDA7CgogIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkgewogICAgcmV0dXJuIHBsYWNlbWVudDsKICB9CgogIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpOwogIHZhciByZWN0cyA9IHsKICAgIHRvcDogewogICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCwKICAgICAgaGVpZ2h0OiByZWZSZWN0LnRvcCAtIGJvdW5kYXJpZXMudG9wCiAgICB9LAogICAgcmlnaHQ6IHsKICAgICAgd2lkdGg6IGJvdW5kYXJpZXMucmlnaHQgLSByZWZSZWN0LnJpZ2h0LAogICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0CiAgICB9LAogICAgYm90dG9tOiB7CiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLAogICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b20KICAgIH0sCiAgICBsZWZ0OiB7CiAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsCiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHQKICAgIH0KICB9OwogIHZhciBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKS5tYXAoZnVuY3Rpb24gKGtleSkgewogICAgcmV0dXJuIF9leHRlbmRzKHsKICAgICAga2V5OiBrZXkKICAgIH0sIHJlY3RzW2tleV0sIHsKICAgICAgYXJlYTogZ2V0QXJlYShyZWN0c1trZXldKQogICAgfSk7CiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgcmV0dXJuIGIuYXJlYSAtIGEuYXJlYTsKICB9KTsKICB2YXIgZmlsdGVyZWRBcmVhcyA9IHNvcnRlZEFyZWFzLmZpbHRlcihmdW5jdGlvbiAoX3JlZjIpIHsKICAgIHZhciB3aWR0aCA9IF9yZWYyLndpZHRoLAogICAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodDsKICAgIHJldHVybiB3aWR0aCA+PSBwb3BwZXIuY2xpZW50V2lkdGggJiYgaGVpZ2h0ID49IHBvcHBlci5jbGllbnRIZWlnaHQ7CiAgfSk7CiAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7CiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdOwogIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7Cn0KLyoqCiAqIEdldCBvZmZzZXRzIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudAogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQHBhcmFtIHtPYmplY3R9IHN0YXRlCiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50CiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcykKICogQHBhcmFtIHtFbGVtZW50fSBmaXhlZFBvc2l0aW9uIC0gaXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZQogKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcgogKi8KCgpmdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkgewogIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsOwogIHZhciBjb21tb25PZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIGdldFJlZmVyZW5jZU5vZGUocmVmZXJlbmNlKSk7CiAgcmV0dXJuIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShyZWZlcmVuY2UsIGNvbW1vbk9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7Cn0KLyoqCiAqIEdldCB0aGUgb3V0ZXIgc2l6ZXMgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKG9mZnNldCBzaXplICsgbWFyZ2lucykKICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudAogKiBAcmV0dXJucyB7T2JqZWN0fSBvYmplY3QgY29udGFpbmluZyB3aWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXMKICovCgoKZnVuY3Rpb24gZ2V0T3V0ZXJTaXplcyhlbGVtZW50KSB7CiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldzsKICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7CiAgdmFyIHggPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Cb3R0b20gfHwgMCk7CiAgdmFyIHkgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0IHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luUmlnaHQgfHwgMCk7CiAgdmFyIHJlc3VsdCA9IHsKICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoICsgeSwKICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQgKyB4CiAgfTsKICByZXR1cm4gcmVzdWx0Owp9Ci8qKgogKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCBvZiB0aGUgZ2l2ZW4gb25lCiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50CiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50CiAqLwoKCmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkgewogIHZhciBoYXNoID0gewogICAgbGVmdDogJ3JpZ2h0JywKICAgIHJpZ2h0OiAnbGVmdCcsCiAgICBib3R0b206ICd0b3AnLAogICAgdG9wOiAnYm90dG9tJwogIH07CiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHsKICAgIHJldHVybiBoYXNoW21hdGNoZWRdOwogIH0pOwp9Ci8qKgogKiBHZXQgb2Zmc2V0cyB0byB0aGUgcG9wcGVyCiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAcGFyYW0ge09iamVjdH0gcG9zaXRpb24gLSBDU1MgcG9zaXRpb24gdGhlIFBvcHBlciB3aWxsIGdldCBhcHBsaWVkCiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudAogKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpCiAqIEBwYXJhbSB7U3RyaW5nfSBwbGFjZW1lbnQgLSBvbmUgb2YgdGhlIHZhbGlkIHBsYWNlbWVudCBvcHRpb25zCiAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcgogKi8KCgpmdW5jdGlvbiBnZXRQb3BwZXJPZmZzZXRzKHBvcHBlciwgcmVmZXJlbmNlT2Zmc2V0cywgcGxhY2VtZW50KSB7CiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07IC8vIEdldCBwb3BwZXIgbm9kZSBzaXplcwoKICB2YXIgcG9wcGVyUmVjdCA9IGdldE91dGVyU2l6ZXMocG9wcGVyKTsgLy8gQWRkIHBvc2l0aW9uLCB3aWR0aCBhbmQgaGVpZ2h0IHRvIG91ciBvZmZzZXRzIG9iamVjdAoKICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHsKICAgIHdpZHRoOiBwb3BwZXJSZWN0LndpZHRoLAogICAgaGVpZ2h0OiBwb3BwZXJSZWN0LmhlaWdodAogIH07IC8vIGRlcGVuZGluZyBieSB0aGUgcG9wcGVyIHBsYWNlbWVudCB3ZSBoYXZlIHRvIGNvbXB1dGUgaXRzIG9mZnNldHMgc2xpZ2h0bHkgZGlmZmVyZW50bHkKCiAgdmFyIGlzSG9yaXogPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xOwogIHZhciBtYWluU2lkZSA9IGlzSG9yaXogPyAndG9wJyA6ICdsZWZ0JzsKICB2YXIgc2Vjb25kYXJ5U2lkZSA9IGlzSG9yaXogPyAnbGVmdCcgOiAndG9wJzsKICB2YXIgbWVhc3VyZW1lbnQgPSBpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnOwogIHZhciBzZWNvbmRhcnlNZWFzdXJlbWVudCA9ICFpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnOwogIHBvcHBlck9mZnNldHNbbWFpblNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1ttYWluU2lkZV0gKyByZWZlcmVuY2VPZmZzZXRzW21lYXN1cmVtZW50XSAvIDIgLSBwb3BwZXJSZWN0W21lYXN1cmVtZW50XSAvIDI7CgogIGlmIChwbGFjZW1lbnQgPT09IHNlY29uZGFyeVNpZGUpIHsKICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07CiAgfSBlbHNlIHsKICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW2dldE9wcG9zaXRlUGxhY2VtZW50KHNlY29uZGFyeVNpZGUpXTsKICB9CgogIHJldHVybiBwb3BwZXJPZmZzZXRzOwp9Ci8qKgogKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXkKICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBhcmd1bWVudCB7QXJyYXl9IGFycgogKiBAYXJndW1lbnQgcHJvcAogKiBAYXJndW1lbnQgdmFsdWUKICogQHJldHVybnMgaW5kZXggb3IgLTEKICovCgoKZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7CiAgLy8gdXNlIG5hdGl2ZSBmaW5kIGlmIHN1cHBvcnRlZAogIGlmIChBcnJheS5wcm90b3R5cGUuZmluZCkgewogICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTsKICB9IC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgCgoKICByZXR1cm4gYXJyLmZpbHRlcihjaGVjaylbMF07Cn0KLyoqCiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIG9iamVjdAogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQGFyZ3VtZW50IHtBcnJheX0gYXJyCiAqIEBhcmd1bWVudCBwcm9wCiAqIEBhcmd1bWVudCB2YWx1ZQogKiBAcmV0dXJucyBpbmRleCBvciAtMQogKi8KCgpmdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcm9wLCB2YWx1ZSkgewogIC8vIHVzZSBuYXRpdmUgZmluZEluZGV4IGlmIHN1cHBvcnRlZAogIGlmIChBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7CiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChmdW5jdGlvbiAoY3VyKSB7CiAgICAgIHJldHVybiBjdXJbcHJvcF0gPT09IHZhbHVlOwogICAgfSk7CiAgfSAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZAoKCiAgdmFyIG1hdGNoID0gZmluZChhcnIsIGZ1bmN0aW9uIChvYmopIHsKICAgIHJldHVybiBvYmpbcHJvcF0gPT09IHZhbHVlOwogIH0pOwogIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7Cn0KLyoqCiAqIExvb3AgdHJvdWdoIHRoZSBsaXN0IG9mIG1vZGlmaWVycyBhbmQgcnVuIHRoZW0gaW4gb3JkZXIsCiAqIGVhY2ggb2YgdGhlbSB3aWxsIHRoZW4gZWRpdCB0aGUgZGF0YSBvYmplY3QuCiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGEKICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzCiAqIEBwYXJhbSB7U3RyaW5nfSBlbmRzIC0gT3B0aW9uYWwgbW9kaWZpZXIgbmFtZSB1c2VkIGFzIHN0b3BwZXIKICogQHJldHVybnMge2RhdGFPYmplY3R9CiAqLwoKCmZ1bmN0aW9uIHJ1bk1vZGlmaWVycyhtb2RpZmllcnMsIGRhdGEsIGVuZHMpIHsKICB2YXIgbW9kaWZpZXJzVG9SdW4gPSBlbmRzID09PSB1bmRlZmluZWQgPyBtb2RpZmllcnMgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4KG1vZGlmaWVycywgJ25hbWUnLCBlbmRzKSk7CiAgbW9kaWZpZXJzVG9SdW4uZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHsKICAgIGlmIChtb2RpZmllclsnZnVuY3Rpb24nXSkgewogICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvbgogICAgICBjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7CiAgICB9CgogICAgdmFyIGZuID0gbW9kaWZpZXJbJ2Z1bmN0aW9uJ10gfHwgbW9kaWZpZXIuZm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uCgogICAgaWYgKG1vZGlmaWVyLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihmbikpIHsKICAgICAgLy8gQWRkIHByb3BlcnRpZXMgdG8gb2Zmc2V0cyB0byBtYWtlIHRoZW0gYSBjb21wbGV0ZSBjbGllbnRSZWN0IG9iamVjdAogICAgICAvLyB3ZSBkbyB0aGlzIGJlZm9yZSBlYWNoIG1vZGlmaWVyIHRvIG1ha2Ugc3VyZSB0aGUgcHJldmlvdXMgb25lIGRvZXNuJ3QKICAgICAgLy8gbWVzcyB3aXRoIHRoZXNlIHZhbHVlcwogICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTsKICAgICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSk7CiAgICAgIGRhdGEgPSBmbihkYXRhLCBtb2RpZmllcik7CiAgICB9CiAgfSk7CiAgcmV0dXJuIGRhdGE7Cn0KLyoqCiAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIsIGNvbXB1dGluZyB0aGUgbmV3IG9mZnNldHMgYW5kIGFwcGx5aW5nCiAqIHRoZSBuZXcgc3R5bGUuPGJyIC8+CiAqIFByZWZlciBgc2NoZWR1bGVVcGRhdGVgIG92ZXIgYHVwZGF0ZWAgYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSByZWFzb25zLgogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIKICovCgoKZnVuY3Rpb24gdXBkYXRlKCkgewogIC8vIGlmIHBvcHBlciBpcyBkZXN0cm95ZWQsIGRvbid0IHBlcmZvcm0gYW55IGZ1cnRoZXIgdXBkYXRlCiAgaWYgKHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpIHsKICAgIHJldHVybjsKICB9CgogIHZhciBkYXRhID0gewogICAgaW5zdGFuY2U6IHRoaXMsCiAgICBzdHlsZXM6IHt9LAogICAgYXJyb3dTdHlsZXM6IHt9LAogICAgYXR0cmlidXRlczoge30sCiAgICBmbGlwcGVkOiBmYWxzZSwKICAgIG9mZnNldHM6IHt9CiAgfTsgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzCgogIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHRoaXMuc3RhdGUsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQpOyAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCwKICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkCiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlCgogIGRhdGEucGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQodGhpcy5vcHRpb25zLnBsYWNlbWVudCwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTsgLy8gc3RvcmUgdGhlIGNvbXB1dGVkIHBsYWNlbWVudCBpbnNpZGUgYG9yaWdpbmFsUGxhY2VtZW50YAoKICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7CiAgZGF0YS5wb3NpdGlvbkZpeGVkID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQ7IC8vIGNvbXB1dGUgdGhlIHBvcHBlciBvZmZzZXRzCgogIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRQb3BwZXJPZmZzZXRzKHRoaXMucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCk7CiAgZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZSc7IC8vIHJ1biB0aGUgbW9kaWZpZXJzCgogIGRhdGEgPSBydW5Nb2RpZmllcnModGhpcy5tb2RpZmllcnMsIGRhdGEpOyAvLyB0aGUgZmlyc3QgYHVwZGF0ZWAgd2lsbCBjYWxsIGBvbkNyZWF0ZWAgY2FsbGJhY2sKICAvLyB0aGUgb3RoZXIgb25lcyB3aWxsIGNhbGwgYG9uVXBkYXRlYCBjYWxsYmFjawoKICBpZiAoIXRoaXMuc3RhdGUuaXNDcmVhdGVkKSB7CiAgICB0aGlzLnN0YXRlLmlzQ3JlYXRlZCA9IHRydWU7CiAgICB0aGlzLm9wdGlvbnMub25DcmVhdGUoZGF0YSk7CiAgfSBlbHNlIHsKICAgIHRoaXMub3B0aW9ucy5vblVwZGF0ZShkYXRhKTsKICB9Cn0KLyoqCiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuCiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAcmV0dXJucyB7Qm9vbGVhbn0KICovCgoKZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHsKICByZXR1cm4gbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHsKICAgIHZhciBuYW1lID0gX3JlZi5uYW1lLAogICAgICAgIGVuYWJsZWQgPSBfcmVmLmVuYWJsZWQ7CiAgICByZXR1cm4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWU7CiAgfSk7Cn0KLyoqCiAqIEdldCB0aGUgcHJlZml4ZWQgc3VwcG9ydGVkIHByb3BlcnR5IG5hbWUKICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eSAoY2FtZWxDYXNlKQogKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeCkKICovCgoKZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7CiAgdmFyIHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107CiAgdmFyIHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTsKICAgIHZhciB0b0NoZWNrID0gcHJlZml4ID8gJycgKyBwcmVmaXggKyB1cHBlclByb3AgOiBwcm9wZXJ0eTsKCiAgICBpZiAodHlwZW9mIGRvY3VtZW50LmJvZHkuc3R5bGVbdG9DaGVja10gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgIHJldHVybiB0b0NoZWNrOwogICAgfQogIH0KCiAgcmV0dXJuIG51bGw7Cn0KLyoqCiAqIERlc3Ryb3lzIHRoZSBwb3BwZXIuCiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlcgogKi8KCgpmdW5jdGlvbiBkZXN0cm95KCkgewogIHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlOyAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZAoKICBpZiAoaXNNb2RpZmllckVuYWJsZWQodGhpcy5tb2RpZmllcnMsICdhcHBseVN0eWxlJykpIHsKICAgIHRoaXMucG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKTsKICAgIHRoaXMucG9wcGVyLnN0eWxlLnBvc2l0aW9uID0gJyc7CiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJzsKICAgIHRoaXMucG9wcGVyLnN0eWxlLmxlZnQgPSAnJzsKICAgIHRoaXMucG9wcGVyLnN0eWxlLnJpZ2h0ID0gJyc7CiAgICB0aGlzLnBvcHBlci5zdHlsZS5ib3R0b20gPSAnJzsKICAgIHRoaXMucG9wcGVyLnN0eWxlLndpbGxDaGFuZ2UgPSAnJzsKICAgIHRoaXMucG9wcGVyLnN0eWxlW2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyldID0gJyc7CiAgfQoKICB0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpOyAvLyByZW1vdmUgdGhlIHBvcHBlciBpZiB1c2VyIGV4cGxpY2l0bHkgYXNrZWQgZm9yIHRoZSBkZWxldGlvbiBvbiBkZXN0cm95CiAgLy8gZG8gbm90IHVzZSBgcmVtb3ZlYCBiZWNhdXNlIElFMTEgZG9lc24ndCBzdXBwb3J0IGl0CgogIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlT25EZXN0cm95KSB7CiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTsKICB9CgogIHJldHVybiB0aGlzOwp9Ci8qKgogKiBHZXQgdGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnQKICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50CiAqIEByZXR1cm5zIHtXaW5kb3d9CiAqLwoKCmZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtZW50KSB7CiAgdmFyIG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7CiAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93Owp9CgpmdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHsKICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50Lm5vZGVOYW1lID09PSAnQk9EWSc7CiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IHNjcm9sbFBhcmVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogc2Nyb2xsUGFyZW50OwogIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgewogICAgcGFzc2l2ZTogdHJ1ZQogIH0pOwoKICBpZiAoIWlzQm9keSkgewogICAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cyk7CiAgfQoKICBzY3JvbGxQYXJlbnRzLnB1c2godGFyZ2V0KTsKfQovKioKICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uCiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAcHJpdmF0ZQogKi8KCgpmdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgb3B0aW9ucywgc3RhdGUsIHVwZGF0ZUJvdW5kKSB7CiAgLy8gUmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvdwogIHN0YXRlLnVwZGF0ZUJvdW5kID0gdXBkYXRlQm91bmQ7CiAgZ2V0V2luZG93KHJlZmVyZW5jZSkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQsIHsKICAgIHBhc3NpdmU6IHRydWUKICB9KTsgLy8gU2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzCgogIHZhciBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJlZmVyZW5jZSk7CiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbEVsZW1lbnQsICdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCwgc3RhdGUuc2Nyb2xsUGFyZW50cyk7CiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IHNjcm9sbEVsZW1lbnQ7CiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IHRydWU7CiAgcmV0dXJuIHN0YXRlOwp9Ci8qKgogKiBJdCB3aWxsIGFkZCByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgc3RhcnQgcmVjYWxjdWxhdGluZwogKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuCiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlcgogKi8KCgpmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycygpIHsKICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkgewogICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5zY2hlZHVsZVVwZGF0ZSk7CiAgfQp9Ci8qKgogKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb24KICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBwcml2YXRlCiAqLwoKCmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHsKICAvLyBSZW1vdmUgcmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvdwogIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTsgLy8gUmVtb3ZlIHNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50cwoKICBzdGF0ZS5zY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkgewogICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTsKICB9KTsgLy8gUmVzZXQgc3RhdGUKCiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsOwogIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTsKICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gbnVsbDsKICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7CiAgcmV0dXJuIHN0YXRlOwp9Ci8qKgogKiBJdCB3aWxsIHJlbW92ZSByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgd29uJ3QgcmVjYWxjdWxhdGUgcG9wcGVyIHBvc2l0aW9uCiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgYG9uVXBkYXRlYCBjYWxsYmFjayBhbnltb3JlLAogKiB1bmxlc3MgeW91IGNhbGwgYHVwZGF0ZWAgbWV0aG9kIG1hbnVhbGx5LgogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIKICovCgoKZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkgewogIGlmICh0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHsKICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpOwogICAgdGhpcy5zdGF0ZSA9IHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLnN0YXRlKTsKICB9Cn0KLyoqCiAqIFRlbGxzIGlmIGEgZ2l2ZW4gaW5wdXQgaXMgYSBudW1iZXIKICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBwYXJhbSB7Kn0gaW5wdXQgdG8gY2hlY2sKICogQHJldHVybiB7Qm9vbGVhbn0KICovCgoKZnVuY3Rpb24gaXNOdW1lcmljKG4pIHsKICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pOwp9Ci8qKgogKiBTZXQgdGhlIHN0eWxlIHRvIHRoZSBnaXZlbiBwb3BwZXIKICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIHN0eWxlIHRvCiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXMKICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQKICovCgoKZnVuY3Rpb24gc2V0U3R5bGVzKGVsZW1lbnQsIHN0eWxlcykgewogIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkgewogICAgdmFyIHVuaXQgPSAnJzsgLy8gYWRkIHVuaXQgaWYgdGhlIHZhbHVlIGlzIG51bWVyaWMgYW5kIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nCgogICAgaWYgKFsnd2lkdGgnLCAnaGVpZ2h0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLmluZGV4T2YocHJvcCkgIT09IC0xICYmIGlzTnVtZXJpYyhzdHlsZXNbcHJvcF0pKSB7CiAgICAgIHVuaXQgPSAncHgnOwogICAgfQoKICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF0gKyB1bml0OwogIH0pOwp9Ci8qKgogKiBTZXQgdGhlIGF0dHJpYnV0ZXMgdG8gdGhlIGdpdmVuIHBvcHBlcgogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgYXR0cmlidXRlcyB0bwogKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzCiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50CiAqLwoKCmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykgewogIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHsKICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbcHJvcF07CgogICAgaWYgKHZhbHVlICE9PSBmYWxzZSkgewogICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTsKICAgIH0gZWxzZSB7CiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHByb3ApOwogICAgfQogIH0pOwp9Ci8qKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1vZGlmaWVycwogKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kCiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudAogKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5hdHRyaWJ1dGVzIC0gTGlzdCBvZiBhdHRyaWJ1dGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudAogKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zCiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0CiAqLwoKCmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkgewogIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLnN0eWxlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsCiAgLy8gaW4gdGhpcyB3YXkgd2UgY2FuIG1ha2UgdGhlIDNyZCBwYXJ0eSBtb2RpZmllcnMgYWRkIGN1c3RvbSBzdHlsZXMgdG8gaXQKICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzCiAgLy8gbGluZXMgb2YgdGhpcyBtb2RpZmllciEKICBzZXRTdHlsZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuc3R5bGVzKTsgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsCiAgLy8gdGhleSB3aWxsIGJlIHNldCBhcyBIVE1MIGF0dHJpYnV0ZXMgb2YgdGhlIGVsZW1lbnQKCiAgc2V0QXR0cmlidXRlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5hdHRyaWJ1dGVzKTsgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGRlZmluZWQgYW5kIGFycm93U3R5bGVzIGhhcyBzb21lIHByb3BlcnRpZXMKCiAgaWYgKGRhdGEuYXJyb3dFbGVtZW50ICYmIE9iamVjdC5rZXlzKGRhdGEuYXJyb3dTdHlsZXMpLmxlbmd0aCkgewogICAgc2V0U3R5bGVzKGRhdGEuYXJyb3dFbGVtZW50LCBkYXRhLmFycm93U3R5bGVzKTsKICB9CgogIHJldHVybiBkYXRhOwp9Ci8qKgogKiBTZXQgdGhlIHgtcGxhY2VtZW50IGF0dHJpYnV0ZSBiZWZvcmUgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZAogKiB0byBhZGQgbWFyZ2lucyB0byB0aGUgcG9wcGVyIG1hcmdpbnMgbmVlZHMgdG8gYmUgY2FsY3VsYXRlZCB0byBnZXQgdGhlCiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuCiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5tb2RpZmllcnMKICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlcgogKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUG9wcGVyLmpzIG9wdGlvbnMKICovCgoKZnVuY3Rpb24gYXBwbHlTdHlsZU9uTG9hZChyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBzdGF0ZSkgewogIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0cwogIHZhciByZWZlcmVuY2VPZmZzZXRzID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMucG9zaXRpb25GaXhlZCk7IC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LAogIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWQKICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWUKCiAgdmFyIHBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KG9wdGlvbnMucGxhY2VtZW50LCByZWZlcmVuY2VPZmZzZXRzLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTsKICBwb3BwZXIuc2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcsIHBsYWNlbWVudCk7IC8vIEFwcGx5IGBwb3NpdGlvbmAgdG8gcG9wcGVyIGJlZm9yZSBhbnl0aGluZyBlbHNlIGJlY2F1c2UKICAvLyB3aXRob3V0IHRoZSBwb3NpdGlvbiBhcHBsaWVkIHdlIGNhbid0IGd1YXJhbnRlZSBjb3JyZWN0IGNvbXB1dGF0aW9ucwoKICBzZXRTdHlsZXMocG9wcGVyLCB7CiAgICBwb3NpdGlvbjogb3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZScKICB9KTsKICByZXR1cm4gb3B0aW9uczsKfQovKioKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZAogKiBAYXJndW1lbnQge0Jvb2xlYW59IHNob3VsZFJvdW5kIC0gSWYgdGhlIG9mZnNldHMgc2hvdWxkIGJlIHJvdW5kZWQgYXQgYWxsCiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBwb3BwZXIncyBwb3NpdGlvbiBvZmZzZXRzIHJvdW5kZWQKICoKICogVGhlIHRhbGUgb2YgcGl4ZWwtcGVyZmVjdCBwb3NpdGlvbmluZy4gSXQncyBzdGlsbCBub3QgMTAwJSBwZXJmZWN0LCBidXQgYXMKICogZ29vZCBhcyBpdCBjYW4gYmUgd2l0aGluIHJlYXNvbi4KICogRGlzY3Vzc2lvbiBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9wdWxsLzcxNQogKgogKiBMb3cgRFBJIHNjcmVlbnMgY2F1c2UgYSBwb3BwZXIgdG8gYmUgYmx1cnJ5IGlmIG5vdCB1c2luZyBmdWxsIHBpeGVscyAoU2FmYXJpCiAqIGFzIHdlbGwgb24gSGlnaCBEUEkgc2NyZWVucykuCiAqCiAqIEZpcmVmb3ggcHJlZmVycyBubyByb3VuZGluZyBmb3IgcG9zaXRpb25pbmcgYW5kIGRvZXMgbm90IGhhdmUgYmx1cnJpbmVzcyBvbgogKiBoaWdoIERQSSBzY3JlZW5zLgogKgogKiBPbmx5IGhvcml6b250YWwgcGxhY2VtZW50IGFuZCBsZWZ0L3JpZ2h0IHZhbHVlcyBuZWVkIHRvIGJlIGNvbnNpZGVyZWQuCiAqLwoKCmZ1bmN0aW9uIGdldFJvdW5kZWRPZmZzZXRzKGRhdGEsIHNob3VsZFJvdW5kKSB7CiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsCiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLAogICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTsKICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kLAogICAgICBmbG9vciA9IE1hdGguZmxvb3I7CgogIHZhciBub1JvdW5kID0gZnVuY3Rpb24gbm9Sb3VuZCh2KSB7CiAgICByZXR1cm4gdjsKICB9OwoKICB2YXIgcmVmZXJlbmNlV2lkdGggPSByb3VuZChyZWZlcmVuY2Uud2lkdGgpOwogIHZhciBwb3BwZXJXaWR0aCA9IHJvdW5kKHBvcHBlci53aWR0aCk7CiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGRhdGEucGxhY2VtZW50KSAhPT0gLTE7CiAgdmFyIGlzVmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuaW5kZXhPZignLScpICE9PSAtMTsKICB2YXIgc2FtZVdpZHRoUGFyaXR5ID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSBwb3BwZXJXaWR0aCAlIDI7CiAgdmFyIGJvdGhPZGRXaWR0aCA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gMSAmJiBwb3BwZXJXaWR0aCAlIDIgPT09IDE7CiAgdmFyIGhvcml6b250YWxUb0ludGVnZXIgPSAhc2hvdWxkUm91bmQgPyBub1JvdW5kIDogaXNWZXJ0aWNhbCB8fCBpc1ZhcmlhdGlvbiB8fCBzYW1lV2lkdGhQYXJpdHkgPyByb3VuZCA6IGZsb29yOwogIHZhciB2ZXJ0aWNhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiByb3VuZDsKICByZXR1cm4gewogICAgbGVmdDogaG9yaXpvbnRhbFRvSW50ZWdlcihib3RoT2RkV2lkdGggJiYgIWlzVmFyaWF0aW9uICYmIHNob3VsZFJvdW5kID8gcG9wcGVyLmxlZnQgLSAxIDogcG9wcGVyLmxlZnQpLAogICAgdG9wOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIudG9wKSwKICAgIGJvdHRvbTogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLmJvdHRvbSksCiAgICByaWdodDogaG9yaXpvbnRhbFRvSW50ZWdlcihwb3BwZXIucmlnaHQpCiAgfTsKfQoKdmFyIGlzRmlyZWZveCA9IGlzQnJvd3NlciAmJiAvRmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7Ci8qKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1vZGlmaWVycwogKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kCiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnMKICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZAogKi8KCmZ1bmN0aW9uIGNvbXB1dGVTdHlsZShkYXRhLCBvcHRpb25zKSB7CiAgdmFyIHggPSBvcHRpb25zLngsCiAgICAgIHkgPSBvcHRpb25zLnk7CiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7IC8vIFJlbW92ZSB0aGlzIGxlZ2FjeSBzdXBwb3J0IGluIFBvcHBlci5qcyB2MgoKICB2YXIgbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7CiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnOwogIH0pLmdwdUFjY2VsZXJhdGlvbjsKCiAgaWYgKGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7CiAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBncHVBY2NlbGVyYXRpb25gIG9wdGlvbiBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllciBhbmQgd2lsbCBub3QgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBQb3BwZXIuanMhJyk7CiAgfQoKICB2YXIgZ3B1QWNjZWxlcmF0aW9uID0gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjsKICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTsKICB2YXIgb2Zmc2V0UGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpOyAvLyBTdHlsZXMKCiAgdmFyIHN0eWxlcyA9IHsKICAgIHBvc2l0aW9uOiBwb3BwZXIucG9zaXRpb24KICB9OwogIHZhciBvZmZzZXRzID0gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgd2luZG93LmRldmljZVBpeGVsUmF0aW8gPCAyIHx8ICFpc0ZpcmVmb3gpOwogIHZhciBzaWRlQSA9IHggPT09ICdib3R0b20nID8gJ3RvcCcgOiAnYm90dG9tJzsKICB2YXIgc2lkZUIgPSB5ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JzsgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsCiAgLy8gIHdlIHVzZSBgdHJhbnNsYXRlM2RgIHRvIGFwcGx5IHRoZSBwb3NpdGlvbiB0byB0aGUgcG9wcGVyIHdlCiAgLy8gYXV0b21hdGljYWxseSB1c2UgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCB2ZXJzaW9uIGlmIG5lZWRlZAoKICB2YXIgcHJlZml4ZWRQcm9wZXJ0eSA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7IC8vIG5vdywgbGV0J3MgbWFrZSBhIHN0ZXAgYmFjayBhbmQgbG9vayBhdCB0aGlzIGNvZGUgY2xvc2VseSAod3RmPykKICAvLyBJZiB0aGUgY29udGVudCBvZiB0aGUgcG9wcGVyIGdyb3dzIG9uY2UgaXQncyBiZWVuIHBvc2l0aW9uZWQsIGl0CiAgLy8gbWF5IGhhcHBlbiB0aGF0IHRoZSBwb3BwZXIgZ2V0cyBtaXNwbGFjZWQgYmVjYXVzZSBvZiB0aGUgbmV3IGNvbnRlbnQKICAvLyBvdmVyZmxvd2luZyBpdHMgcmVmZXJlbmNlIGVsZW1lbnQKICAvLyBUbyBhdm9pZCB0aGlzIHByb2JsZW0sIHdlIHByb3ZpZGUgdHdvIG9wdGlvbnMgKHggYW5kIHkpLCB3aGljaCBhbGxvdwogIC8vIHRoZSBjb25zdW1lciB0byBkZWZpbmUgdGhlIG9mZnNldCBvcmlnaW4uCiAgLy8gSWYgd2UgcG9zaXRpb24gYSBwb3BwZXIgb24gdG9wIG9mIGEgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIGNhbiBzZXQKICAvLyBgeGAgdG8gYHRvcGAgdG8gbWFrZSB0aGUgcG9wcGVyIGdyb3cgdG93YXJkcyBpdHMgdG9wIGluc3RlYWQgb2YKICAvLyBpdHMgYm90dG9tLgoKICB2YXIgbGVmdCA9IHZvaWQgMCwKICAgICAgdG9wID0gdm9pZCAwOwoKICBpZiAoc2lkZUEgPT09ICdib3R0b20nKSB7CiAgICAvLyB3aGVuIG9mZnNldFBhcmVudCBpcyA8aHRtbD4gdGhlIHBvc2l0aW9uaW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiAoZXhjbHVkaW5nIHRoZSBzY3JvbGxiYXIpCiAgICAvLyBhbmQgbm90IHRoZSBib3R0b20gb2YgdGhlIGh0bWwgZWxlbWVudAogICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7CiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207CiAgICB9IGVsc2UgewogICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTsKICAgIH0KICB9IGVsc2UgewogICAgdG9wID0gb2Zmc2V0cy50b3A7CiAgfQoKICBpZiAoc2lkZUIgPT09ICdyaWdodCcpIHsKICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykgewogICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudC5jbGllbnRXaWR0aCArIG9mZnNldHMucmlnaHQ7CiAgICB9IGVsc2UgewogICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0OwogICAgfQogIH0gZWxzZSB7CiAgICBsZWZ0ID0gb2Zmc2V0cy5sZWZ0OwogIH0KCiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7CiAgICBzdHlsZXNbcHJlZml4ZWRQcm9wZXJ0eV0gPSAndHJhbnNsYXRlM2QoJyArIGxlZnQgKyAncHgsICcgKyB0b3AgKyAncHgsIDApJzsKICAgIHN0eWxlc1tzaWRlQV0gPSAwOwogICAgc3R5bGVzW3NpZGVCXSA9IDA7CiAgICBzdHlsZXMud2lsbENoYW5nZSA9ICd0cmFuc2Zvcm0nOwogIH0gZWxzZSB7CiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllcwogICAgdmFyIGludmVydFRvcCA9IHNpZGVBID09PSAnYm90dG9tJyA/IC0xIDogMTsKICAgIHZhciBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7CiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wOwogICAgc3R5bGVzW3NpZGVCXSA9IGxlZnQgKiBpbnZlcnRMZWZ0OwogICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBzaWRlQSArICcsICcgKyBzaWRlQjsKICB9IC8vIEF0dHJpYnV0ZXMKCgogIHZhciBhdHRyaWJ1dGVzID0gewogICAgJ3gtcGxhY2VtZW50JzogZGF0YS5wbGFjZW1lbnQKICB9OyAvLyBVcGRhdGUgYGRhdGFgIGF0dHJpYnV0ZXMsIHN0eWxlcyBhbmQgYXJyb3dTdHlsZXMKCiAgZGF0YS5hdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIGRhdGEuYXR0cmlidXRlcyk7CiAgZGF0YS5zdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7CiAgZGF0YS5hcnJvd1N0eWxlcyA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMuYXJyb3csIGRhdGEuYXJyb3dTdHlsZXMpOwogIHJldHVybiBkYXRhOwp9Ci8qKgogKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+CiAqIEl0IGNoZWNrcyBpZiB0aGUgbmVlZGVkIG1vZGlmaWVyIGlzIGxpc3RlZCBhbmQgZW5hYmxlZC4KICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVycyAtIGxpc3Qgb2YgbW9kaWZpZXJzCiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllcgogKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyCiAqIEByZXR1cm5zIHtCb29sZWFufQogKi8KCgpmdW5jdGlvbiBpc01vZGlmaWVyUmVxdWlyZWQobW9kaWZpZXJzLCByZXF1ZXN0aW5nTmFtZSwgcmVxdWVzdGVkTmFtZSkgewogIHZhciByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsIGZ1bmN0aW9uIChfcmVmKSB7CiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTsKICAgIHJldHVybiBuYW1lID09PSByZXF1ZXN0aW5nTmFtZTsKICB9KTsKICB2YXIgaXNSZXF1aXJlZCA9ICEhcmVxdWVzdGluZyAmJiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAobW9kaWZpZXIpIHsKICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSByZXF1ZXN0ZWROYW1lICYmIG1vZGlmaWVyLmVuYWJsZWQgJiYgbW9kaWZpZXIub3JkZXIgPCByZXF1ZXN0aW5nLm9yZGVyOwogIH0pOwoKICBpZiAoIWlzUmVxdWlyZWQpIHsKICAgIHZhciBfcmVxdWVzdGluZyA9ICdgJyArIHJlcXVlc3RpbmdOYW1lICsgJ2AnOwoKICAgIHZhciByZXF1ZXN0ZWQgPSAnYCcgKyByZXF1ZXN0ZWROYW1lICsgJ2AnOwogICAgY29uc29sZS53YXJuKHJlcXVlc3RlZCArICcgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJyArIF9yZXF1ZXN0aW5nICsgJyBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICcgKyBfcmVxdWVzdGluZyArICchJyk7CiAgfQoKICByZXR1cm4gaXNSZXF1aXJlZDsKfQovKioKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBNb2RpZmllcnMKICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2QKICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9ucwogKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkCiAqLwoKCmZ1bmN0aW9uIGFycm93KGRhdGEsIG9wdGlvbnMpIHsKICB2YXIgX2RhdGEkb2Zmc2V0cyRhcnJvdzsgLy8gYXJyb3cgZGVwZW5kcyBvbiBrZWVwVG9nZXRoZXIgaW4gb3JkZXIgdG8gd29yawoKCiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkgewogICAgcmV0dXJuIGRhdGE7CiAgfQoKICB2YXIgYXJyb3dFbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50OyAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgYSBzdHJpbmcsIHN1cHBvc2UgaXQncyBhIENTUyBzZWxlY3RvcgoKICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHsKICAgIGFycm93RWxlbWVudCA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTsgLy8gaWYgYXJyb3dFbGVtZW50IGlzIG5vdCBmb3VuZCwgZG9uJ3QgcnVuIHRoZSBtb2RpZmllcgoKICAgIGlmICghYXJyb3dFbGVtZW50KSB7CiAgICAgIHJldHVybiBkYXRhOwogICAgfQogIH0gZWxzZSB7CiAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZQogICAgLy8gcHJvdmlkZWQgRE9NIG5vZGUgaXMgY2hpbGQgb2YgaXRzIHBvcHBlciBub2RlCiAgICBpZiAoIWRhdGEuaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGFycm93RWxlbWVudCkpIHsKICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgYXJyb3cuZWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhJyk7CiAgICAgIHJldHVybiBkYXRhOwogICAgfQogIH0KCiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07CiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsCiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLAogICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTsKICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7CiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7CiAgdmFyIHNpZGVDYXBpdGFsaXplZCA9IGlzVmVydGljYWwgPyAnVG9wJyA6ICdMZWZ0JzsKICB2YXIgc2lkZSA9IHNpZGVDYXBpdGFsaXplZC50b0xvd2VyQ2FzZSgpOwogIHZhciBhbHRTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnOwogIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnOwogIHZhciBhcnJvd0VsZW1lbnRTaXplID0gZ2V0T3V0ZXJTaXplcyhhcnJvd0VsZW1lbnQpW2xlbl07IC8vCiAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzCiAgLy8gcmVmZXJlbmNlIGhhdmUgZW5vdWdoIHBpeGVscyBpbiBjb25qdW5jdGlvbgogIC8vCiAgLy8gdG9wL2xlZnQgc2lkZQoKICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7CiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC09IHBvcHBlcltzaWRlXSAtIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUpOwogIH0gLy8gYm90dG9tL3JpZ2h0IHNpZGUKCgogIGlmIChyZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplID4gcG9wcGVyW29wU2lkZV0pIHsKICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gKz0gcmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSAtIHBvcHBlcltvcFNpZGVdOwogIH0KCiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7IC8vIGNvbXB1dGUgY2VudGVyIG9mIHRoZSBwb3BwZXIKCiAgdmFyIGNlbnRlciA9IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVtsZW5dIC8gMiAtIGFycm93RWxlbWVudFNpemUgLyAyOyAvLyBDb21wdXRlIHRoZSBzaWRlVmFsdWUgdXNpbmcgdGhlIHVwZGF0ZWQgcG9wcGVyIG9mZnNldHMKICAvLyB0YWtlIHBvcHBlciBtYXJnaW4gaW4gYWNjb3VudCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhpcyBpbmZvIGF2YWlsYWJsZQoKICB2YXIgY3NzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGRhdGEuaW5zdGFuY2UucG9wcGVyKTsKICB2YXIgcG9wcGVyTWFyZ2luU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydtYXJnaW4nICsgc2lkZUNhcGl0YWxpemVkXSk7CiAgdmFyIHBvcHBlckJvcmRlclNpZGUgPSBwYXJzZUZsb2F0KGNzc1snYm9yZGVyJyArIHNpZGVDYXBpdGFsaXplZCArICdXaWR0aCddKTsKICB2YXIgc2lkZVZhbHVlID0gY2VudGVyIC0gZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtIHBvcHBlck1hcmdpblNpZGUgLSBwb3BwZXJCb3JkZXJTaWRlOyAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXIKCiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTsKICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDsKICBkYXRhLm9mZnNldHMuYXJyb3cgPSAoX2RhdGEkb2Zmc2V0cyRhcnJvdyA9IHt9LCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBzaWRlLCBNYXRoLnJvdW5kKHNpZGVWYWx1ZSkpLCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBhbHRTaWRlLCAnJyksIF9kYXRhJG9mZnNldHMkYXJyb3cpOwogIHJldHVybiBkYXRhOwp9Ci8qKgogKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZQogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb24KICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnQgdmFyaWF0aW9uCiAqLwoKCmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbikgewogIGlmICh2YXJpYXRpb24gPT09ICdlbmQnKSB7CiAgICByZXR1cm4gJ3N0YXJ0JzsKICB9IGVsc2UgaWYgKHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JykgewogICAgcmV0dXJuICdlbmQnOwogIH0KCiAgcmV0dXJuIHZhcmlhdGlvbjsKfQovKioKICogTGlzdCBvZiBhY2NlcHRlZCBwbGFjZW1lbnRzIHRvIHVzZSBhcyB2YWx1ZXMgb2YgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbi48YnIgLz4KICogVmFsaWQgcGxhY2VtZW50cyBhcmU6CiAqIC0gYGF1dG9gCiAqIC0gYHRvcGAKICogLSBgcmlnaHRgCiAqIC0gYGJvdHRvbWAKICogLSBgbGVmdGAKICoKICogRWFjaCBwbGFjZW1lbnQgY2FuIGhhdmUgYSB2YXJpYXRpb24gZnJvbSB0aGlzIGxpc3Q6CiAqIC0gYC1zdGFydGAKICogLSBgLWVuZGAKICoKICogVmFyaWF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgZWFzaWx5IGlmIHlvdSB0aGluayBvZiB0aGVtIGFzIHRoZSBsZWZ0IHRvIHJpZ2h0CiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGAKICogaXMgcmlnaHQuPGJyIC8+CiAqIFZlcnRpY2FsbHkgKGBsZWZ0YCBhbmQgYHJpZ2h0YCksIGBzdGFydGAgaXMgdG9wIGFuZCBgZW5kYCBpcyBib3R0b20uCiAqCiAqIFNvbWUgdmFsaWQgZXhhbXBsZXMgYXJlOgogKiAtIGB0b3AtZW5kYCAob24gdG9wIG9mIHJlZmVyZW5jZSwgcmlnaHQgYWxpZ25lZCkKICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKQogKiAtIGBib3R0b21gIChvbiBib3R0b20sIGNlbnRlcmVkKQogKiAtIGBhdXRvLWVuZGAgKG9uIHRoZSBzaWRlIHdpdGggbW9yZSBzcGFjZSBhdmFpbGFibGUsIGFsaWdubWVudCBkZXBlbmRzIGJ5IHBsYWNlbWVudCkKICoKICogQHN0YXRpYwogKiBAdHlwZSB7QXJyYXl9CiAqIEBlbnVtIHtTdHJpbmd9CiAqIEByZWFkb25seQogKiBAbWV0aG9kIHBsYWNlbWVudHMKICogQG1lbWJlcm9mIFBvcHBlcgogKi8KCgp2YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddOyAvLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGAKCnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpOwovKioKICogR2l2ZW4gYW4gaW5pdGlhbCBwbGFjZW1lbnQsIHJldHVybnMgYWxsIHRoZSBzdWJzZXF1ZW50IHBsYWNlbWVudHMKICogY2xvY2t3aXNlIChvciBjb3VudGVyLWNsb2Nrd2lzZSkuCiAqCiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucykKICogQGFyZ3VtZW50IHtCb29sZWFufSBjb3VudGVyIC0gU2V0IHRvIHRydWUgdG8gd2FsayB0aGUgcGxhY2VtZW50cyBjb3VudGVyY2xvY2t3aXNlCiAqIEByZXR1cm5zIHtBcnJheX0gcGxhY2VtZW50cyBpbmNsdWRpbmcgdGhlaXIgdmFyaWF0aW9ucwogKi8KCmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHsKICB2YXIgY291bnRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7CiAgdmFyIGluZGV4ID0gdmFsaWRQbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KTsKICB2YXIgYXJyID0gdmFsaWRQbGFjZW1lbnRzLnNsaWNlKGluZGV4ICsgMSkuY29uY2F0KHZhbGlkUGxhY2VtZW50cy5zbGljZSgwLCBpbmRleCkpOwogIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjsKfQoKdmFyIEJFSEFWSU9SUyA9IHsKICBGTElQOiAnZmxpcCcsCiAgQ0xPQ0tXSVNFOiAnY2xvY2t3aXNlJywKICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZScKfTsKLyoqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgTW9kaWZpZXJzCiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kCiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnMKICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZAogKi8KCmZ1bmN0aW9uIGZsaXAoZGF0YSwgb3B0aW9ucykgewogIC8vIGlmIGBpbm5lcmAgbW9kaWZpZXIgaXMgZW5hYmxlZCwgd2UgY2FuJ3QgdXNlIHRoZSBgZmxpcGAgbW9kaWZpZXIKICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7CiAgICByZXR1cm4gZGF0YTsKICB9CgogIGlmIChkYXRhLmZsaXBwZWQgJiYgZGF0YS5wbGFjZW1lbnQgPT09IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQpIHsKICAgIC8vIHNlZW1zIGxpa2UgZmxpcCBpcyB0cnlpbmcgdG8gbG9vcCwgcHJvYmFibHkgdGhlcmUncyBub3QgZW5vdWdoIHNwYWNlIG9uIGFueSBvZiB0aGUgZmxpcHBhYmxlIHNpZGVzCiAgICByZXR1cm4gZGF0YTsKICB9CgogIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTsKICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTsKICB2YXIgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpOwogIHZhciB2YXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzFdIHx8ICcnOwogIHZhciBmbGlwT3JkZXIgPSBbXTsKCiAgc3dpdGNoIChvcHRpb25zLmJlaGF2aW9yKSB7CiAgICBjYXNlIEJFSEFWSU9SUy5GTElQOgogICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07CiAgICAgIGJyZWFrOwoKICAgIGNhc2UgQkVIQVZJT1JTLkNMT0NLV0lTRToKICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCk7CiAgICAgIGJyZWFrOwoKICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6CiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQsIHRydWUpOwogICAgICBicmVhazsKCiAgICBkZWZhdWx0OgogICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yOwogIH0KCiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7CiAgICBpZiAocGxhY2VtZW50ICE9PSBzdGVwIHx8IGZsaXBPcmRlci5sZW5ndGggPT09IGluZGV4ICsgMSkgewogICAgICByZXR1cm4gZGF0YTsKICAgIH0KCiAgICBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdOwogICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpOwogICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyOwogICAgdmFyIHJlZk9mZnNldHMgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlOyAvLyB1c2luZyBmbG9vciBiZWNhdXNlIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyBtYXkgY29udGFpbiBkZWNpbWFscyB3ZSBhcmUgbm90IGdvaW5nIHRvIGNvbnNpZGVyIGhlcmUKCiAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yOwogICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7CiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpOwogICAgdmFyIG92ZXJmbG93c1JpZ2h0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihib3VuZGFyaWVzLnJpZ2h0KTsKICAgIHZhciBvdmVyZmxvd3NUb3AgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihib3VuZGFyaWVzLnRvcCk7CiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pOwogICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTsgLy8gZmxpcCB0aGUgdmFyaWF0aW9uIGlmIHJlcXVpcmVkCgogICAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xOyAvLyBmbGlwcyB2YXJpYXRpb24gaWYgcmVmZXJlbmNlIGVsZW1lbnQgb3ZlcmZsb3dzIGJvdW5kYXJpZXMKCiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbkJ5UmVmID0gISFvcHRpb25zLmZsaXBWYXJpYXRpb25zICYmIChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NSaWdodCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzVG9wIHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzQm90dG9tKTsgLy8gZmxpcHMgdmFyaWF0aW9uIGlmIHBvcHBlciBjb250ZW50IG92ZXJmbG93cyBib3VuZGFyaWVzCgogICAgdmFyIGZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQgPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NMZWZ0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NCb3R0b20gfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NUb3ApOwogICAgdmFyIGZsaXBwZWRWYXJpYXRpb24gPSBmbGlwcGVkVmFyaWF0aW9uQnlSZWYgfHwgZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudDsKCiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7CiAgICAgIC8vIHRoaXMgYm9vbGVhbiB0byBkZXRlY3QgYW55IGZsaXAgbG9vcAogICAgICBkYXRhLmZsaXBwZWQgPSB0cnVlOwoKICAgICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMpIHsKICAgICAgICBwbGFjZW1lbnQgPSBmbGlwT3JkZXJbaW5kZXggKyAxXTsKICAgICAgfQoKICAgICAgaWYgKGZsaXBwZWRWYXJpYXRpb24pIHsKICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pOwogICAgICB9CgogICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7IC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aAogICAgICAvLyBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0eSB3ZSBtYXkgYWRkIGluIHRoZSBmdXR1cmUKCiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLnBvcHBlciwgZ2V0UG9wcGVyT2Zmc2V0cyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpKTsKICAgICAgZGF0YSA9IHJ1bk1vZGlmaWVycyhkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZGF0YSwgJ2ZsaXAnKTsKICAgIH0KICB9KTsKICByZXR1cm4gZGF0YTsKfQovKioKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBNb2RpZmllcnMKICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2QKICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9ucwogKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkCiAqLwoKCmZ1bmN0aW9uIGtlZXBUb2dldGhlcihkYXRhKSB7CiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsCiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLAogICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTsKICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTsKICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yOwogIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTsKICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAncmlnaHQnIDogJ2JvdHRvbSc7CiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJzsKICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnOwoKICBpZiAocG9wcGVyW3NpZGVdIDwgZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pKSB7CiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdOwogIH0KCiAgaWYgKHBvcHBlcltvcFNpZGVdID4gZmxvb3IocmVmZXJlbmNlW3NpZGVdKSkgewogICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW3NpZGVdKTsKICB9CgogIHJldHVybiBkYXRhOwp9Ci8qKgogKiBDb252ZXJ0cyBhIHN0cmluZyBjb250YWluaW5nIHZhbHVlICsgdW5pdCBpbnRvIGEgcHggdmFsdWUgbnVtYmVyCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9CiAqIEBwcml2YXRlCiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzdHIgLSBWYWx1ZSArIHVuaXQgc3RyaW5nCiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGAKICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHMKICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMKICogQHJldHVybnMge051bWJlcnxTdHJpbmd9CiAqIFZhbHVlIGluIHBpeGVscywgb3Igb3JpZ2luYWwgc3RyaW5nIGlmIG5vIHZhbHVlcyB3ZXJlIGV4dHJhY3RlZAogKi8KCgpmdW5jdGlvbiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpIHsKICAvLyBzZXBhcmF0ZSB2YWx1ZSBmcm9tIHVuaXQKICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcLXxcKyk/XGQqXC4/XGQqKSguKikvKTsKICB2YXIgdmFsdWUgPSArc3BsaXRbMV07CiAgdmFyIHVuaXQgPSBzcGxpdFsyXTsgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzcwoKICBpZiAoIXZhbHVlKSB7CiAgICByZXR1cm4gc3RyOwogIH0KCiAgaWYgKHVuaXQuaW5kZXhPZignJScpID09PSAwKSB7CiAgICB2YXIgZWxlbWVudCA9IHZvaWQgMDsKCiAgICBzd2l0Y2ggKHVuaXQpIHsKICAgICAgY2FzZSAnJXAnOgogICAgICAgIGVsZW1lbnQgPSBwb3BwZXJPZmZzZXRzOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSAnJSc6CiAgICAgIGNhc2UgJyVyJzoKICAgICAgZGVmYXVsdDoKICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0czsKICAgIH0KCiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3QoZWxlbWVudCk7CiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTsKICB9IGVsc2UgaWYgKHVuaXQgPT09ICd2aCcgfHwgdW5pdCA9PT0gJ3Z3JykgewogICAgLy8gaWYgaXMgYSB2aCBvciB2dywgd2UgY2FsY3VsYXRlIHRoZSBzaXplIGJhc2VkIG9uIHRoZSB2aWV3cG9ydAogICAgdmFyIHNpemUgPSB2b2lkIDA7CgogICAgaWYgKHVuaXQgPT09ICd2aCcpIHsKICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTsKICAgIH0gZWxzZSB7CiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApOwogICAgfQoKICAgIHJldHVybiBzaXplIC8gMTAwICogdmFsdWU7CiAgfSBlbHNlIHsKICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlCiAgICAvLyBpZiBpcyBhbiBpbXBsaWNpdCB1bml0LCBpdCdzIHB4LCBhbmQgd2UgcmV0dXJuIGp1c3QgdGhlIHZhbHVlCiAgICByZXR1cm4gdmFsdWU7CiAgfQp9Ci8qKgogKiBQYXJzZSBhbiBgb2Zmc2V0YCBzdHJpbmcgdG8gZXh0cmFwb2xhdGUgYHhgIGFuZCBgeWAgbnVtZXJpYyBvZmZzZXRzLgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fQogKiBAcHJpdmF0ZQogKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0CiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzCiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzCiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50CiAqIEByZXR1cm5zIHtBcnJheX0gYSB0d28gY2VsbHMgYXJyYXkgd2l0aCB4IGFuZCB5IG9mZnNldHMgaW4gbnVtYmVycwogKi8KCgpmdW5jdGlvbiBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMsIGJhc2VQbGFjZW1lbnQpIHsKICB2YXIgb2Zmc2V0cyA9IFswLCAwXTsgLy8gVXNlIGhlaWdodCBpZiBwbGFjZW1lbnQgaXMgbGVmdCBvciByaWdodCBhbmQgaW5kZXggaXMgMCBvdGhlcndpc2UgdXNlIHdpZHRoCiAgLy8gaW4gdGhpcyB3YXkgdGhlIGZpcnN0IG9mZnNldCB3aWxsIHVzZSBhbiBheGlzIGFuZCB0aGUgc2Vjb25kIG9uZQogIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmUKCiAgdmFyIHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xOyAvLyBTcGxpdCB0aGUgb2Zmc2V0IHN0cmluZyB0byBvYnRhaW4gYSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMKICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpCgogIHZhciBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcK3xcLSkvKS5tYXAoZnVuY3Rpb24gKGZyYWcpIHsKICAgIHJldHVybiBmcmFnLnRyaW0oKTsKICB9KTsgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lCiAgLy8gdGhleSBjb3VsZCBiZSBzZXBhcmF0ZWQgYnkgY29tbWEgb3Igc3BhY2UKCiAgdmFyIGRpdmlkZXIgPSBmcmFnbWVudHMuaW5kZXhPZihmaW5kKGZyYWdtZW50cywgZnVuY3Rpb24gKGZyYWcpIHsKICAgIHJldHVybiBmcmFnLnNlYXJjaCgvLHxccy8pICE9PSAtMTsKICB9KSk7CgogIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHsKICAgIGNvbnNvbGUud2FybignT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLicpOwogIH0gLy8gSWYgZGl2aWRlciBpcyBmb3VuZCwgd2UgZGl2aWRlIHRoZSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMgdG8gZGl2aWRlCiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLgoKCiAgdmFyIHNwbGl0UmVnZXggPSAvXHMqLFxzKnxccysvOwogIHZhciBvcHMgPSBkaXZpZGVyICE9PSAtMSA/IFtmcmFnbWVudHMuc2xpY2UoMCwgZGl2aWRlcikuY29uY2F0KFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMF1dKSwgW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVsxXV0uY29uY2F0KGZyYWdtZW50cy5zbGljZShkaXZpZGVyICsgMSkpXSA6IFtmcmFnbWVudHNdOyAvLyBDb252ZXJ0IHRoZSB2YWx1ZXMgd2l0aCB1bml0cyB0byBhYnNvbHV0ZSBwaXhlbHMgdG8gYWxsb3cgb3VyIGNvbXB1dGF0aW9ucwoKICBvcHMgPSBvcHMubWFwKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHsKICAgIC8vIE1vc3Qgb2YgdGhlIHVuaXRzIHJlbHkgb24gdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBwb3BwZXIKICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnOwogICAgdmFyIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7CiAgICByZXR1cm4gb3AgLy8gVGhpcyBhZ2dyZWdhdGVzIGFueSBgK2Agb3IgYC1gIHNpZ24gdGhhdCBhcmVuJ3QgY29uc2lkZXJlZCBvcGVyYXRvcnMKICAgIC8vIGUuZy46IDEwICsgKzUgPT4gWzEwLCArLCArNV0KICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgaWYgKGFbYS5sZW5ndGggLSAxXSA9PT0gJycgJiYgWycrJywgJy0nXS5pbmRleE9mKGIpICE9PSAtMSkgewogICAgICAgIGFbYS5sZW5ndGggLSAxXSA9IGI7CiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlOwogICAgICAgIHJldHVybiBhOwogICAgICB9IGVsc2UgaWYgKG1lcmdlV2l0aFByZXZpb3VzKSB7CiAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7CiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTsKICAgICAgICByZXR1cm4gYTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gYS5jb25jYXQoYik7CiAgICAgIH0KICAgIH0sIFtdKSAvLyBIZXJlIHdlIGNvbnZlcnQgdGhlIHN0cmluZyB2YWx1ZXMgaW50byBudW1iZXIgdmFsdWVzIChpbiBweCkKICAgIC5tYXAoZnVuY3Rpb24gKHN0cikgewogICAgICByZXR1cm4gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKTsKICAgIH0pOwogIH0pOyAvLyBMb29wIHRyb3VnaCB0aGUgb2Zmc2V0cyBhcnJheXMgYW5kIGV4ZWN1dGUgdGhlIG9wZXJhdGlvbnMKCiAgb3BzLmZvckVhY2goZnVuY3Rpb24gKG9wLCBpbmRleCkgewogICAgb3AuZm9yRWFjaChmdW5jdGlvbiAoZnJhZywgaW5kZXgyKSB7CiAgICAgIGlmIChpc051bWVyaWMoZnJhZykpIHsKICAgICAgICBvZmZzZXRzW2luZGV4XSArPSBmcmFnICogKG9wW2luZGV4MiAtIDFdID09PSAnLScgPyAtMSA6IDEpOwogICAgICB9CiAgICB9KTsKICB9KTsKICByZXR1cm4gb2Zmc2V0czsKfQovKioKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBNb2RpZmllcnMKICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2QKICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9ucwogKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTAKICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uCiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWQKICovCgoKZnVuY3Rpb24gb2Zmc2V0KGRhdGEsIF9yZWYpIHsKICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7CiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LAogICAgICBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLAogICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlciwKICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7CiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTsKICB2YXIgb2Zmc2V0cyA9IHZvaWQgMDsKCiAgaWYgKGlzTnVtZXJpYygrb2Zmc2V0KSkgewogICAgb2Zmc2V0cyA9IFsrb2Zmc2V0LCAwXTsKICB9IGVsc2UgewogICAgb2Zmc2V0cyA9IHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyLCByZWZlcmVuY2UsIGJhc2VQbGFjZW1lbnQpOwogIH0KCiAgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0JykgewogICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdOwogICAgcG9wcGVyLmxlZnQgLT0gb2Zmc2V0c1sxXTsKICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdyaWdodCcpIHsKICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTsKICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMV07CiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAndG9wJykgewogICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTsKICAgIHBvcHBlci50b3AgLT0gb2Zmc2V0c1sxXTsKICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7CiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdOwogICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzFdOwogIH0KCiAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7CiAgcmV0dXJuIGRhdGE7Cn0KLyoqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgTW9kaWZpZXJzCiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2QKICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9ucwogKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkCiAqLwoKCmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7CiAgdmFyIGJvdW5kYXJpZXNFbGVtZW50ID0gb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpOyAvLyBJZiBvZmZzZXRQYXJlbnQgaXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSByZWFsbHkgd2FudCB0bwogIC8vIGdvIG9uZSBzdGVwIHVwIGFuZCB1c2UgdGhlIG5leHQgb2Zmc2V0UGFyZW50IGFzIHJlZmVyZW5jZSB0bwogIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW4KCiAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkgewogICAgYm91bmRhcmllc0VsZW1lbnQgPSBnZXRPZmZzZXRQYXJlbnQoYm91bmRhcmllc0VsZW1lbnQpOwogIH0gLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlCiAgLy8gcmVzZXRzIHRoZSBwb3BwZXIncyBwb3NpdGlvbiBzbyB0aGF0IHRoZSBkb2N1bWVudCBzaXplIGNhbiBiZSBjYWxjdWxhdGVkIGV4Y2x1ZGluZwogIC8vIHRoZSBzaXplIG9mIHRoZSBwb3BwZXIgZWxlbWVudCBpdHNlbGYKCgogIHZhciB0cmFuc2Zvcm1Qcm9wID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTsKICB2YXIgcG9wcGVyU3R5bGVzID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIuc3R5bGU7IC8vIGFzc2lnbm1lbnQgdG8gaGVscCBtaW5pZmljYXRpb24KCiAgdmFyIHRvcCA9IHBvcHBlclN0eWxlcy50b3AsCiAgICAgIGxlZnQgPSBwb3BwZXJTdHlsZXMubGVmdCwKICAgICAgdHJhbnNmb3JtID0gcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdOwogIHBvcHBlclN0eWxlcy50b3AgPSAnJzsKICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnOwogIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9ICcnOwogIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQsIGRhdGEucG9zaXRpb25GaXhlZCk7IC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZQogIC8vIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBzdHlsZSBwcm9wZXJ0aWVzIGFmdGVyIHRoZSBvZmZzZXRzIGhhdmUgYmVlbiBjb21wdXRlZAoKICBwb3BwZXJTdHlsZXMudG9wID0gdG9wOwogIHBvcHBlclN0eWxlcy5sZWZ0ID0gbGVmdDsKICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07CiAgb3B0aW9ucy5ib3VuZGFyaWVzID0gYm91bmRhcmllczsKICB2YXIgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5OwogIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyOwogIHZhciBjaGVjayA9IHsKICAgIHByaW1hcnk6IGZ1bmN0aW9uIHByaW1hcnkocGxhY2VtZW50KSB7CiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdOwoKICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdIDwgYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHsKICAgICAgICB2YWx1ZSA9IE1hdGgubWF4KHBvcHBlcltwbGFjZW1lbnRdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0pOwogICAgICB9CgogICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIHBsYWNlbWVudCwgdmFsdWUpOwogICAgfSwKICAgIHNlY29uZGFyeTogZnVuY3Rpb24gc2Vjb25kYXJ5KHBsYWNlbWVudCkgewogICAgICB2YXIgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJzsKICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW21haW5TaWRlXTsKCiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA+IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7CiAgICAgICAgdmFsdWUgPSBNYXRoLm1pbihwb3BwZXJbbWFpblNpZGVdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0gLSAocGxhY2VtZW50ID09PSAncmlnaHQnID8gcG9wcGVyLndpZHRoIDogcG9wcGVyLmhlaWdodCkpOwogICAgICB9CgogICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIG1haW5TaWRlLCB2YWx1ZSk7CiAgICB9CiAgfTsKICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHsKICAgIHZhciBzaWRlID0gWydsZWZ0JywgJ3RvcCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTEgPyAncHJpbWFyeScgOiAnc2Vjb25kYXJ5JzsKICAgIHBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoZWNrW3NpZGVdKHBsYWNlbWVudCkpOwogIH0pOwogIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBwb3BwZXI7CiAgcmV0dXJuIGRhdGE7Cn0KLyoqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgTW9kaWZpZXJzCiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2QKICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9ucwogKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkCiAqLwoKCmZ1bmN0aW9uIHNoaWZ0KGRhdGEpIHsKICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7CiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTsKICB2YXIgc2hpZnR2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTsgLy8gaWYgc2hpZnQgc2hpZnR2YXJpYXRpb24gaXMgc3BlY2lmaWVkLCBydW4gdGhlIG1vZGlmaWVyCgogIGlmIChzaGlmdHZhcmlhdGlvbikgewogICAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsCiAgICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2UsCiAgICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXI7CiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xOwogICAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7CiAgICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnOwogICAgdmFyIHNoaWZ0T2Zmc2V0cyA9IHsKICAgICAgc3RhcnQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0pLAogICAgICBlbmQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbWVhc3VyZW1lbnRdIC0gcG9wcGVyW21lYXN1cmVtZW50XSkKICAgIH07CiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgc2hpZnRPZmZzZXRzW3NoaWZ0dmFyaWF0aW9uXSk7CiAgfQoKICByZXR1cm4gZGF0YTsKfQovKioKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBNb2RpZmllcnMKICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2QKICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9ucwogKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkCiAqLwoKCmZ1bmN0aW9uIGhpZGUoZGF0YSkgewogIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkgewogICAgcmV0dXJuIGRhdGE7CiAgfQoKICB2YXIgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7CiAgdmFyIGJvdW5kID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7CiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7CiAgfSkuYm91bmRhcmllczsKCiAgaWYgKHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8IHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8IHJlZlJlY3QudG9wID4gYm91bmQuYm90dG9tIHx8IHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0KSB7CiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWQKICAgIGlmIChkYXRhLmhpZGUgPT09IHRydWUpIHsKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9CgogICAgZGF0YS5oaWRlID0gdHJ1ZTsKICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gJyc7CiAgfSBlbHNlIHsKICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZAogICAgaWYgKGRhdGEuaGlkZSA9PT0gZmFsc2UpIHsKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9CgogICAgZGF0YS5oaWRlID0gZmFsc2U7CiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlOwogIH0KCiAgcmV0dXJuIGRhdGE7Cn0KLyoqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgTW9kaWZpZXJzCiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2QKICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9ucwogKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkCiAqLwoKCmZ1bmN0aW9uIGlubmVyKGRhdGEpIHsKICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7CiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTsKICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cywKICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsCiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlOwogIHZhciBpc0hvcml6ID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7CiAgdmFyIHN1YnRyYWN0TGVuZ3RoID0gWyd0b3AnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPT09IC0xOwogIHBvcHBlcltpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCddID0gcmVmZXJlbmNlW2Jhc2VQbGFjZW1lbnRdIC0gKHN1YnRyYWN0TGVuZ3RoID8gcG9wcGVyW2lzSG9yaXogPyAnd2lkdGgnIDogJ2hlaWdodCddIDogMCk7CiAgZGF0YS5wbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpOwogIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7CiAgcmV0dXJuIGRhdGE7Cn0KLyoqCiAqIE1vZGlmaWVyIGZ1bmN0aW9uLCBlYWNoIG1vZGlmaWVyIGNhbiBoYXZlIGEgZnVuY3Rpb24gb2YgdGhpcyB0eXBlIGFzc2lnbmVkCiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPgogKiBUaGVzZSBmdW5jdGlvbnMgd2lsbCBiZSBjYWxsZWQgb24gZWFjaCB1cGRhdGUsIHRoaXMgbWVhbnMgdGhhdCB5b3UgbXVzdAogKiBtYWtlIHN1cmUgdGhleSBhcmUgcGVyZm9ybWFudCBlbm91Z2ggdG8gYXZvaWQgcGVyZm9ybWFuY2UgYm90dGxlbmVja3MuCiAqCiAqIEBmdW5jdGlvbiBNb2RpZmllckZuCiAqIEBhcmd1bWVudCB7ZGF0YU9iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kCiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnMKICogQHJldHVybnMge2RhdGFPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWQKICovCgovKioKICogTW9kaWZpZXJzIGFyZSBwbHVnaW5zIHVzZWQgdG8gYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHlvdXIgcG9wcGVycy48YnIgLz4KICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllcwogKiBuZWVkZWQgYnkgdGhlIGxpYnJhcnkuCiAqCiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLgogKiBBbGwgdGhlIG90aGVyIHByb3BlcnRpZXMgYXJlIGNvbmZpZ3VyYXRpb25zIHRoYXQgY291bGQgYmUgdHdlYWtlZC4KICogQG5hbWVzcGFjZSBtb2RpZmllcnMKICovCgoKdmFyIG1vZGlmaWVycyA9IHsKICAvKioKICAgKiBNb2RpZmllciB1c2VkIHRvIHNoaWZ0IHRoZSBwb3BwZXIgb24gdGhlIHN0YXJ0IG9yIGVuZCBvZiBpdHMgcmVmZXJlbmNlCiAgICogZWxlbWVudC48YnIgLz4KICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+CiAgICogSXQgY2FuIGJlIG9uZSBlaXRoZXIgYC1lbmRgIG9yIGAtc3RhcnRgLgogICAqIEBtZW1iZXJvZiBtb2RpZmllcnMKICAgKiBAaW5uZXIKICAgKi8KICBzaGlmdDogewogICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi8KICAgIG9yZGVyOiAxMDAsCgogICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqLwogICAgZW5hYmxlZDogdHJ1ZSwKCiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovCiAgICBmbjogc2hpZnQKICB9LAoKICAvKioKICAgKiBUaGUgYG9mZnNldGAgbW9kaWZpZXIgY2FuIHNoaWZ0IHlvdXIgcG9wcGVyIG9uIGJvdGggaXRzIGF4aXMuCiAgICoKICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6CiAgICogLSBgcHhgIG9yIHVuaXQtbGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzCiAgICogLSBgJWAgb3IgYCVyYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudAogICAqIC0gYCVwYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSBwb3BwZXIgZWxlbWVudAogICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXQKICAgKiAtIGB2aGAsIENTUyB2aWV3cG9ydCBoZWlnaHQgdW5pdAogICAqCiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz4KICAgKiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHBsYWNlbWVudCBpcyBgdG9wYCBvciBgYm90dG9tYCwgdGhlIGxlbmd0aCB3aWxsIGJlIHRoZQogICAqIGB3aWR0aGAuIEluIGNhc2Ugb2YgYGxlZnRgIG9yIGByaWdodGAsIGl0IHdpbGwgYmUgdGhlIGBoZWlnaHRgLgogICAqCiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIHZhbHVlIChhcyBgTnVtYmVyYCBvciBgU3RyaW5nYCksIG9yIGEgcGFpciBvZiB2YWx1ZXMKICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+CiAgICogVGhlIGxhdHRlciBpcyBhIGRlcHJlY2F0ZWQgbWV0aG9kIGJlY2F1c2UgaXQgbGVhZHMgdG8gY29uZnVzaW9uIGFuZCB3aWxsIGJlCiAgICogcmVtb3ZlZCBpbiB2Mi48YnIgLz4KICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuCiAgICogTm90ZSB0aGF0IG11bHRpcGxpY2F0aW9ucyBhbmQgZGl2aXNpb25zIGFyZW4ndCBzdXBwb3J0ZWQuCiAgICoKICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6CiAgICogYGBgCiAgICogMTAKICAgKiAnMTAlJwogICAqICcxMCwgMTAnCiAgICogJzEwJSwgMTAnCiAgICogJzEwICsgMTAlJwogICAqICcxMCAtIDV2aCArIDMlJwogICAqICctMTBweCArIDV2aCwgNXB4IC0gNiUnCiAgICogYGBgCiAgICogPiAqKk5CKio6IElmIHlvdSBkZXNpcmUgdG8gYXBwbHkgb2Zmc2V0cyB0byB5b3VyIHBvcHBlcnMgaW4gYSB3YXkgdGhhdCBtYXkgbWFrZSB0aGVtIG92ZXJsYXAKICAgKiA+IHdpdGggdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnQsIHVuZm9ydHVuYXRlbHksIHlvdSB3aWxsIGhhdmUgdG8gZGlzYWJsZSB0aGUgYGZsaXBgIG1vZGlmaWVyLgogICAqID4gWW91IGNhbiByZWFkIG1vcmUgb24gdGhpcyBhdCB0aGlzIFtpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzM3MykuCiAgICoKICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzCiAgICogQGlubmVyCiAgICovCiAgb2Zmc2V0OiB7CiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqLwogICAgb3JkZXI6IDIwMCwKCiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovCiAgICBlbmFibGVkOiB0cnVlLAoKICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi8KICAgIGZuOiBvZmZzZXQsCgogICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MAogICAgICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uCiAgICAgKi8KICAgIG9mZnNldDogMAogIH0sCgogIC8qKgogICAqIE1vZGlmaWVyIHVzZWQgdG8gcHJldmVudCB0aGUgcG9wcGVyIGZyb20gYmVpbmcgcG9zaXRpb25lZCBvdXRzaWRlIHRoZSBib3VuZGFyeS4KICAgKgogICAqIEEgc2NlbmFyaW8gZXhpc3RzIHdoZXJlIHRoZSByZWZlcmVuY2UgaXRzZWxmIGlzIG5vdCB3aXRoaW4gdGhlIGJvdW5kYXJpZXMuPGJyIC8+CiAgICogV2UgY2FuIHNheSBpdCBoYXMgImVzY2FwZWQgdGhlIGJvdW5kYXJpZXMiIOKAlCBvciBqdXN0ICJlc2NhcGVkIi48YnIgLz4KICAgKiBJbiB0aGlzIGNhc2Ugd2UgbmVlZCB0byBkZWNpZGUgd2hldGhlciB0aGUgcG9wcGVyIHNob3VsZCBlaXRoZXI6CiAgICoKICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiAidHJhcHBlZCIgaW4gdGhlIGJvdW5kYXJpZXMsIG9yCiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgImVzY2FwZSB3aXRoIGl0cyByZWZlcmVuY2UiCiAgICoKICAgKiBXaGVuIGBlc2NhcGVXaXRoUmVmZXJlbmNlYCBpcyBzZXQgdG9gdHJ1ZWAgYW5kIHJlZmVyZW5jZSBpcyBjb21wbGV0ZWx5CiAgICogb3V0c2lkZSBpdHMgYm91bmRhcmllcywgdGhlIHBvcHBlciB3aWxsIG92ZXJmbG93IChvciBjb21wbGV0ZWx5IGxlYXZlKQogICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLgogICAqCiAgICogQG1lbWJlcm9mIG1vZGlmaWVycwogICAqIEBpbm5lcgogICAqLwogIHByZXZlbnRPdmVyZmxvdzogewogICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi8KICAgIG9yZGVyOiAzMDAsCgogICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqLwogICAgZW5hYmxlZDogdHJ1ZSwKCiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovCiAgICBmbjogcHJldmVudE92ZXJmbG93LAoKICAgIC8qKgogICAgICogQHByb3Age0FycmF5fSBbcHJpb3JpdHk9WydsZWZ0JywncmlnaHQnLCd0b3AnLCdib3R0b20nXV0KICAgICAqIFBvcHBlciB3aWxsIHRyeSB0byBwcmV2ZW50IG92ZXJmbG93IGZvbGxvd2luZyB0aGVzZSBwcmlvcml0aWVzIGJ5IGRlZmF1bHQsCiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgCiAgICAgKi8KICAgIHByaW9yaXR5OiBbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddLAoKICAgIC8qKgogICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01CiAgICAgKiBBbW91bnQgb2YgcGl4ZWwgdXNlZCB0byBkZWZpbmUgYSBtaW5pbXVtIGRpc3RhbmNlIGJldHdlZW4gdGhlIGJvdW5kYXJpZXMKICAgICAqIGFuZCB0aGUgcG9wcGVyLiBUaGlzIG1ha2VzIHN1cmUgdGhlIHBvcHBlciBhbHdheXMgaGFzIGEgbGl0dGxlIHBhZGRpbmcKICAgICAqIGJldHdlZW4gdGhlIGVkZ2VzIG9mIGl0cyBjb250YWluZXIKICAgICAqLwogICAgcGFkZGluZzogNSwKCiAgICAvKioKICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSdzY3JvbGxQYXJlbnQnCiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLiBDYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLAogICAgICogYHZpZXdwb3J0YCBvciBhbnkgRE9NIGVsZW1lbnQuCiAgICAgKi8KICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50JwogIH0sCgogIC8qKgogICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSBzdXJlIHRoZSByZWZlcmVuY2UgYW5kIGl0cyBwb3BwZXIgc3RheSBuZWFyIGVhY2ggb3RoZXIKICAgKiB3aXRob3V0IGxlYXZpbmcgYW55IGdhcCBiZXR3ZWVuIHRoZSB0d28uIEVzcGVjaWFsbHkgdXNlZnVsIHdoZW4gdGhlIGFycm93IGlzCiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgaXQgcG9pbnRzIHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC4KICAgKiBJdCBjYXJlcyBvbmx5IGFib3V0IHRoZSBmaXJzdCBheGlzLiBZb3UgY2FuIHN0aWxsIGhhdmUgcG9wcGVycyB3aXRoIG1hcmdpbgogICAqIGJldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50LgogICAqIEBtZW1iZXJvZiBtb2RpZmllcnMKICAgKiBAaW5uZXIKICAgKi8KICBrZWVwVG9nZXRoZXI6IHsKICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj00MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovCiAgICBvcmRlcjogNDAwLAoKICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi8KICAgIGVuYWJsZWQ6IHRydWUsCgogICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqLwogICAgZm46IGtlZXBUb2dldGhlcgogIH0sCgogIC8qKgogICAqIFRoaXMgbW9kaWZpZXIgaXMgdXNlZCB0byBtb3ZlIHRoZSBgYXJyb3dFbGVtZW50YCBvZiB0aGUgcG9wcGVyIHRvIG1ha2UKICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC4KICAgKiBJdCB3aWxsIHJlYWQgdGhlIG91dGVyIHNpemUgb2YgdGhlIGBhcnJvd0VsZW1lbnRgIG5vZGUgdG8gZGV0ZWN0IGhvdyBtYW55CiAgICogcGl4ZWxzIG9mIGNvbmp1bmN0aW9uIGFyZSBuZWVkZWQuCiAgICoKICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLgogICAqIEBtZW1iZXJvZiBtb2RpZmllcnMKICAgKiBAaW5uZXIKICAgKi8KICBhcnJvdzogewogICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTUwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi8KICAgIG9yZGVyOiA1MDAsCgogICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqLwogICAgZW5hYmxlZDogdHJ1ZSwKCiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovCiAgICBmbjogYXJyb3csCgogICAgLyoqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGVsZW1lbnQ9J1t4LWFycm93XScgLSBTZWxlY3RvciBvciBub2RlIHVzZWQgYXMgYXJyb3cgKi8KICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nCiAgfSwKCiAgLyoqCiAgICogTW9kaWZpZXIgdXNlZCB0byBmbGlwIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQgd2hlbiBpdCBzdGFydHMgdG8gb3ZlcmxhcCBpdHMKICAgKiByZWZlcmVuY2UgZWxlbWVudC4KICAgKgogICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay4KICAgKgogICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbAogICAqIHJlc3RhcnQgaXQgaWYgaXQgZGV0ZWN0cyB0aGUgbmVlZCB0byBmbGlwIHRoZSBwbGFjZW1lbnQuCiAgICogQG1lbWJlcm9mIG1vZGlmaWVycwogICAqIEBpbm5lcgogICAqLwogIGZsaXA6IHsKICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovCiAgICBvcmRlcjogNjAwLAoKICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi8KICAgIGVuYWJsZWQ6IHRydWUsCgogICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqLwogICAgZm46IGZsaXAsCgogICAgLyoqCiAgICAgKiBAcHJvcCB7U3RyaW5nfEFycmF5fSBiZWhhdmlvcj0nZmxpcCcKICAgICAqIFRoZSBiZWhhdmlvciB1c2VkIHRvIGNoYW5nZSB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50LiBJdCBjYW4gYmUgb25lIG9mCiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWQKICAgICAqIHBsYWNlbWVudHMgKHdpdGggb3B0aW9uYWwgdmFyaWF0aW9ucykKICAgICAqLwogICAgYmVoYXZpb3I6ICdmbGlwJywKCiAgICAvKioKICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NQogICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGAKICAgICAqLwogICAgcGFkZGluZzogNSwKCiAgICAvKioKICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCcKICAgICAqIFRoZSBlbGVtZW50IHdoaWNoIHdpbGwgZGVmaW5lIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwb3BwZXIgcG9zaXRpb24uCiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgbmV2ZXIgYmUgcGxhY2VkIG91dHNpZGUgb2YgdGhlIGRlZmluZWQgYm91bmRhcmllcwogICAgICogKGV4Y2VwdCBpZiBga2VlcFRvZ2V0aGVyYCBpcyBlbmFibGVkKQogICAgICovCiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0JywKCiAgICAvKioKICAgICAqIEBwcm9wIHtCb29sZWFufSBmbGlwVmFyaWF0aW9ucz1mYWxzZQogICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuCiAgICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgb3ZlcmxhcHMgaXRzIGJvdW5kYXJpZXMuCiAgICAgKgogICAgICogVGhlIG9yaWdpbmFsIHBsYWNlbWVudCBzaG91bGQgaGF2ZSBhIHNldCB2YXJpYXRpb24uCiAgICAgKi8KICAgIGZsaXBWYXJpYXRpb25zOiBmYWxzZSwKCiAgICAvKioKICAgICAqIEBwcm9wIHtCb29sZWFufSBmbGlwVmFyaWF0aW9uc0J5Q29udGVudD1mYWxzZQogICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuCiAgICAgKiB0aGUgcG9wcGVyIGVsZW1lbnQgb3ZlcmxhcHMgaXRzIHJlZmVyZW5jZSBib3VuZGFyaWVzLgogICAgICoKICAgICAqIFRoZSBvcmlnaW5hbCBwbGFjZW1lbnQgc2hvdWxkIGhhdmUgYSBzZXQgdmFyaWF0aW9uLgogICAgICovCiAgICBmbGlwVmFyaWF0aW9uc0J5Q29udGVudDogZmFsc2UKICB9LAoKICAvKioKICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2UgdGhlIHBvcHBlciBmbG93IHRvd2FyZCB0aGUgaW5uZXIgb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LgogICAqIEJ5IGRlZmF1bHQsIHdoZW4gdGhpcyBtb2RpZmllciBpcyBkaXNhYmxlZCwgdGhlIHBvcHBlciB3aWxsIGJlIHBsYWNlZCBvdXRzaWRlCiAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50LgogICAqIEBtZW1iZXJvZiBtb2RpZmllcnMKICAgKiBAaW5uZXIKICAgKi8KICBpbm5lcjogewogICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTcwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi8KICAgIG9yZGVyOiA3MDAsCgogICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPWZhbHNlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi8KICAgIGVuYWJsZWQ6IGZhbHNlLAoKICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi8KICAgIGZuOiBpbm5lcgogIH0sCgogIC8qKgogICAqIE1vZGlmaWVyIHVzZWQgdG8gaGlkZSB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dHNpZGUgb2YgdGhlCiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW4KICAgKiBiZSB1c2VkIHRvIGhpZGUgd2l0aCBhIENTUyBzZWxlY3RvciB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBpcwogICAqIG91dCBvZiBib3VuZGFyaWVzLgogICAqCiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLgogICAqIEBtZW1iZXJvZiBtb2RpZmllcnMKICAgKiBAaW5uZXIKICAgKi8KICBoaWRlOiB7CiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqLwogICAgb3JkZXI6IDgwMCwKCiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovCiAgICBlbmFibGVkOiB0cnVlLAoKICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi8KICAgIGZuOiBoaWRlCiAgfSwKCiAgLyoqCiAgICogQ29tcHV0ZXMgdGhlIHN0eWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgZWxlbWVudCB0byBnZXRzCiAgICogcHJvcGVybHkgcG9zaXRpb25lZC4KICAgKgogICAqIE5vdGUgdGhhdCB0aGlzIG1vZGlmaWVyIHdpbGwgbm90IHRvdWNoIHRoZSBET00sIGl0IGp1c3QgcHJlcGFyZXMgdGhlIHN0eWxlcwogICAqIHNvIHRoYXQgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGNhbiBhcHBseSBpdC4gVGhpcyBzZXBhcmF0aW9uIGlzIHVzZWZ1bAogICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi4KICAgKgogICAqIFRoaXMgbW9kaWZpZXIgaGFzIGA4NTBgIGFzIGBvcmRlcmAgdmFsdWUgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eQogICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2QKICAgKiB0byBjaGFuZ2UgaW4gZnV0dXJlIG1ham9yIHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5LgogICAqCiAgICogQG1lbWJlcm9mIG1vZGlmaWVycwogICAqIEBpbm5lcgogICAqLwogIGNvbXB1dGVTdHlsZTogewogICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTg1MCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi8KICAgIG9yZGVyOiA4NTAsCgogICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqLwogICAgZW5hYmxlZDogdHJ1ZSwKCiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovCiAgICBmbjogY29tcHV0ZVN0eWxlLAoKICAgIC8qKgogICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlCiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci4KICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllcwogICAgICovCiAgICBncHVBY2NlbGVyYXRpb246IHRydWUsCgogICAgLyoqCiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nYm90dG9tJ10KICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uCiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgYm90dG9tYAogICAgICovCiAgICB4OiAnYm90dG9tJywKCiAgICAvKioKICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdsZWZ0J10KICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWSBheGlzIChgbGVmdGAgb3IgYHJpZ2h0YCkuIEFLQSBZIG9mZnNldCBvcmlnaW4uCiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgCiAgICAgKi8KICAgIHk6ICdyaWdodCcKICB9LAoKICAvKioKICAgKiBBcHBsaWVzIHRoZSBjb21wdXRlZCBzdHlsZXMgdG8gdGhlIHBvcHBlciBlbGVtZW50LgogICAqCiAgICogQWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyBhcmUgbGltaXRlZCB0byB0aGlzIG1vZGlmaWVyLiBUaGlzIGlzIHVzZWZ1bCBpbiBjYXNlCiAgICogeW91IHdhbnQgdG8gaW50ZWdyYXRlIFBvcHBlci5qcyBpbnNpZGUgYSBmcmFtZXdvcmsgb3IgdmlldyBsaWJyYXJ5IGFuZCB5b3UKICAgKiB3YW50IHRvIGRlbGVnYXRlIGFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgdG8gaXQuCiAgICoKICAgKiBOb3RlIHRoYXQgaWYgeW91IGRpc2FibGUgdGhpcyBtb2RpZmllciwgeW91IG11c3QgbWFrZSBzdXJlIHRoZSBwb3BwZXIgZWxlbWVudAogICAqIGhhcyBpdHMgcG9zaXRpb24gc2V0IHRvIGBhYnNvbHV0ZWAgYmVmb3JlIFBvcHBlci5qcyBjYW4gZG8gaXRzIHdvcmshCiAgICoKICAgKiBKdXN0IGRpc2FibGUgdGhpcyBtb2RpZmllciBhbmQgZGVmaW5lIHlvdXIgb3duIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LgogICAqCiAgICogQG1lbWJlcm9mIG1vZGlmaWVycwogICAqIEBpbm5lcgogICAqLwogIGFwcGx5U3R5bGU6IHsKICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj05MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovCiAgICBvcmRlcjogOTAwLAoKICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi8KICAgIGVuYWJsZWQ6IHRydWUsCgogICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqLwogICAgZm46IGFwcGx5U3R5bGUsCgogICAgLyoqIEBwcm9wIHtGdW5jdGlvbn0gKi8KICAgIG9uTG9hZDogYXBwbHlTdHlsZU9uTG9hZCwKCiAgICAvKioKICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXIKICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZQogICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuCiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXMKICAgICAqLwogICAgZ3B1QWNjZWxlcmF0aW9uOiB1bmRlZmluZWQKICB9Cn07Ci8qKgogKiBUaGUgYGRhdGFPYmplY3RgIGlzIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgaW5mb3JtYXRpb24gdXNlZCBieSBQb3BwZXIuanMuCiAqIFRoaXMgb2JqZWN0IGlzIHBhc3NlZCB0byBtb2RpZmllcnMgYW5kIHRvIHRoZSBgb25DcmVhdGVgIGFuZCBgb25VcGRhdGVgIGNhbGxiYWNrcy4KICogQG5hbWUgZGF0YU9iamVjdAogKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5pbnN0YW5jZSBUaGUgUG9wcGVyLmpzIGluc3RhbmNlCiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLnBsYWNlbWVudCBQbGFjZW1lbnQgYXBwbGllZCB0byBwb3BwZXIKICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgUGxhY2VtZW50IG9yaWdpbmFsbHkgZGVmaW5lZCBvbiBpbml0CiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5mbGlwcGVkIFRydWUgaWYgcG9wcGVyIGhhcyBiZWVuIGZsaXBwZWQgYnkgZmxpcCBtb2RpZmllcgogKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuaGlkZSBUcnVlIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRhcmllcywgdXNlZnVsIHRvIGtub3cgd2hlbiB0byBoaWRlIHRoZSBwb3BwZXIKICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZGF0YS5hcnJvd0VsZW1lbnQgTm9kZSB1c2VkIGFzIGFycm93IGJ5IGFycm93IG1vZGlmaWVyCiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYCkKICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYXJyb3dTdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgYXJyb3cuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApCiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmJvdW5kYXJpZXMgT2Zmc2V0cyBvZiB0aGUgcG9wcGVyIGJvdW5kYXJpZXMKICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50cwogKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnBvcHBlciBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXMKICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzCiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMuYXJyb3ddIGB0b3BgIGFuZCBgbGVmdGAgb2Zmc2V0cywgb25seSBvbmUgb2YgdGhlbSB3aWxsIGJlIGRpZmZlcmVudCBmcm9tIDAKICovCgovKioKICogRGVmYXVsdCBvcHRpb25zIHByb3ZpZGVkIHRvIFBvcHBlci5qcyBjb25zdHJ1Y3Rvci48YnIgLz4KICogVGhlc2UgY2FuIGJlIG92ZXJyaWRkZW4gdXNpbmcgdGhlIGBvcHRpb25zYCBhcmd1bWVudCBvZiBQb3BwZXIuanMuPGJyIC8+CiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUKICogc3RydWN0dXJlIG9mIHRoZSBgb3B0aW9uc2Agb2JqZWN0LCBhcyB0aGUgM3JkIGFyZ3VtZW50LiBGb3IgZXhhbXBsZToKICogYGBgCiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHsKICogICBtb2RpZmllcnM6IHsKICogICAgIHByZXZlbnRPdmVyZmxvdzogeyBlbmFibGVkOiBmYWxzZSB9CiAqICAgfQogKiB9KQogKiBgYGAKICogQHR5cGUge09iamVjdH0KICogQHN0YXRpYwogKiBAbWVtYmVyb2YgUG9wcGVyCiAqLwoKdmFyIERlZmF1bHRzID0gewogIC8qKgogICAqIFBvcHBlcidzIHBsYWNlbWVudC4KICAgKiBAcHJvcCB7UG9wcGVyLnBsYWNlbWVudHN9IHBsYWNlbWVudD0nYm90dG9tJwogICAqLwogIHBsYWNlbWVudDogJ2JvdHRvbScsCgogIC8qKgogICAqIFNldCB0aGlzIHRvIHRydWUgaWYgeW91IHdhbnQgcG9wcGVyIHRvIHBvc2l0aW9uIGl0IHNlbGYgaW4gJ2ZpeGVkJyBtb2RlCiAgICogQHByb3Age0Jvb2xlYW59IHBvc2l0aW9uRml4ZWQ9ZmFsc2UKICAgKi8KICBwb3NpdGlvbkZpeGVkOiBmYWxzZSwKCiAgLyoqCiAgICogV2hldGhlciBldmVudHMgKHJlc2l6ZSwgc2Nyb2xsKSBhcmUgaW5pdGlhbGx5IGVuYWJsZWQuCiAgICogQHByb3Age0Jvb2xlYW59IGV2ZW50c0VuYWJsZWQ9dHJ1ZQogICAqLwogIGV2ZW50c0VuYWJsZWQ6IHRydWUsCgogIC8qKgogICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlbgogICAqIHlvdSBjYWxsIHRoZSBgZGVzdHJveWAgbWV0aG9kLgogICAqIEBwcm9wIHtCb29sZWFufSByZW1vdmVPbkRlc3Ryb3k9ZmFsc2UKICAgKi8KICByZW1vdmVPbkRlc3Ryb3k6IGZhbHNlLAoKICAvKioKICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIGNyZWF0ZWQuPGJyIC8+CiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPgogICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuCiAgICogQHByb3Age29uQ3JlYXRlfQogICAqLwogIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LAoKICAvKioKICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQuIFRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZAogICAqIG9uIHRoZSBpbml0aWFsaXphdGlvbi9jcmVhdGlvbiBvZiB0aGUgcG9wcGVyLCBidXQgb25seSBvbiBzdWJzZXF1ZW50CiAgICogdXBkYXRlcy48YnIgLz4KICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+CiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC4KICAgKiBAcHJvcCB7b25VcGRhdGV9CiAgICovCiAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKCkge30sCgogIC8qKgogICAqIExpc3Qgb2YgbW9kaWZpZXJzIHVzZWQgdG8gbW9kaWZ5IHRoZSBvZmZzZXRzIGJlZm9yZSB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuCiAgICogVGhleSBwcm92aWRlIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiBQb3BwZXIuanMuCiAgICogQHByb3Age21vZGlmaWVyc30KICAgKi8KICBtb2RpZmllcnM6IG1vZGlmaWVycwp9OwovKioKICogQGNhbGxiYWNrIG9uQ3JlYXRlCiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YQogKi8KCi8qKgogKiBAY2FsbGJhY2sgb25VcGRhdGUKICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhCiAqLwovLyBVdGlscwovLyBNZXRob2RzCgp2YXIgUG9wcGVyID0gZnVuY3Rpb24gKCkgewogIC8qKgogICAqIENyZWF0ZXMgYSBuZXcgUG9wcGVyLmpzIGluc3RhbmNlLgogICAqIEBjbGFzcyBQb3BwZXIKICAgKiBAcGFyYW0ge0VsZW1lbnR8cmVmZXJlbmNlT2JqZWN0fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyCiAgICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCAvIFhNTCBlbGVtZW50IHVzZWQgYXMgdGhlIHBvcHBlcgogICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKQogICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZQogICAqLwogIGZ1bmN0aW9uIFBvcHBlcihyZWZlcmVuY2UsIHBvcHBlcikgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307CiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpOwoKICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMudXBkYXRlKTsKICAgIH07IC8vIG1ha2UgdXBkYXRlKCkgZGVib3VuY2VkLCBzbyB0aGF0IGl0IG9ubHkgcnVucyBhdCBtb3N0IG9uY2UtcGVyLXRpY2sKCgogICAgdGhpcy51cGRhdGUgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTsgLy8gd2l0aCB7fSB3ZSBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG9wdGlvbnMgaW5zaWRlIGl0CgogICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cywgb3B0aW9ucyk7IC8vIGluaXQgc3RhdGUKCiAgICB0aGlzLnN0YXRlID0gewogICAgICBpc0Rlc3Ryb3llZDogZmFsc2UsCiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsCiAgICAgIHNjcm9sbFBhcmVudHM6IFtdCiAgICB9OyAvLyBnZXQgcmVmZXJlbmNlIGFuZCBwb3BwZXIgZWxlbWVudHMgKGFsbG93IGpRdWVyeSB3cmFwcGVycykKCiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlOwogICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjsgLy8gRGVlcCBtZXJnZSBtb2RpZmllcnMgb3B0aW9ucwoKICAgIHRoaXMub3B0aW9ucy5tb2RpZmllcnMgPSB7fTsKICAgIE9iamVjdC5rZXlzKF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzLCBvcHRpb25zLm1vZGlmaWVycykpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSwgb3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KTsKICAgIH0pOyAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSkKCiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbiAobmFtZSkgewogICAgICByZXR1cm4gX2V4dGVuZHMoewogICAgICAgIG5hbWU6IG5hbWUKICAgICAgfSwgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0pOwogICAgfSkgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyCiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7CiAgICB9KTsgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkCiAgICAvLyBzdWNoIGNvZGUgaXMgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgb2YgaXRzIG1vZGlmaWVyCiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb24KICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIQoKICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyT3B0aW9ucykgewogICAgICBpZiAobW9kaWZpZXJPcHRpb25zLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihtb2RpZmllck9wdGlvbnMub25Mb2FkKSkgewogICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoX3RoaXMucmVmZXJlbmNlLCBfdGhpcy5wb3BwZXIsIF90aGlzLm9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgX3RoaXMuc3RhdGUpOwogICAgICB9CiAgICB9KTsgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlCgogICAgdGhpcy51cGRhdGUoKTsKICAgIHZhciBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7CgogICAgaWYgKGV2ZW50c0VuYWJsZWQpIHsKICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9ucwogICAgICB0aGlzLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCk7CiAgICB9CgogICAgdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkID0gZXZlbnRzRW5hYmxlZDsKICB9IC8vIFdlIGNhbid0IHVzZSBjbGFzcyBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBkb24ndCBnZXQgbGlzdGVkIGluIHRoZQogIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVicwoKCiAgY3JlYXRlQ2xhc3MoUG9wcGVyLCBbewogICAga2V5OiAndXBkYXRlJywKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUkJDEoKSB7CiAgICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZXN0cm95JywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkgewogICAgICByZXR1cm4gZGVzdHJveS5jYWxsKHRoaXMpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2VuYWJsZUV2ZW50TGlzdGVuZXJzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycyQkMSgpIHsKICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMkJDEoKSB7CiAgICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTsKICAgIH0KICAgIC8qKgogICAgICogU2NoZWR1bGVzIGFuIHVwZGF0ZS4gSXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZS4KICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGUKICAgICAqIEBtZW1iZXJvZiBQb3BwZXIKICAgICAqLwoKICAgIC8qKgogICAgICogQ29sbGVjdGlvbiBvZiB1dGlsaXRpZXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjdXN0b20gbW9kaWZpZXJzLgogICAgICogU3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDEuNywgdGhpcyBtZXRob2QgaXMgYXZhaWxhYmxlIG9ubHkgaWYgeW91CiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC4KICAgICAqCiAgICAgKiAqKkRFUFJFQ0FUSU9OKio6IFRoaXMgd2F5IHRvIGFjY2VzcyBQb3BwZXJVdGlscyBpcyBkZXByZWNhdGVkCiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLgogICAgICogRHVlIHRvIHRoZSBoaWdoIGluc3RhYmlsaXR5IG9mIHRoZSBtZXRob2RzIGNvbnRhaW5lZCBpbiBVdGlscywgd2UgY2FuJ3QKICAgICAqIGd1YXJhbnRlZSB0aGVtIHRvIGZvbGxvdyBzZW12ZXIuIFVzZSB0aGVtIGF0IHlvdXIgb3duIHJpc2shCiAgICAgKiBAc3RhdGljCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHR5cGUge09iamVjdH0KICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44CiAgICAgKiBAbWVtYmVyIFV0aWxzCiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyCiAgICAgKi8KCiAgfV0pOwogIHJldHVybiBQb3BwZXI7Cn0oKTsKLyoqCiAqIFRoZSBgcmVmZXJlbmNlT2JqZWN0YCBpcyBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgY29tcGF0aWJsZSB3aXRoIFBvcHBlci5qcwogKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz4KICogWW91IGNhbiB1c2UgdGhpcyBtZXRob2QgdG8gcG9zaXRpb24gYSBwb3BwZXIgcmVsYXRpdmVseSB0byBhIHNldCBvZiBjb29yZGluYXRlcwogKiBpbiBjYXNlIHlvdSBkb24ndCBoYXZlIGEgRE9NIG5vZGUgdG8gdXNlIGFzIHJlZmVyZW5jZS4KICoKICogYGBgCiAqIG5ldyBQb3BwZXIocmVmZXJlbmNlT2JqZWN0LCBwb3BwZXJOb2RlKTsKICogYGBgCiAqCiAqIE5COiBUaGlzIGZlYXR1cmUgaXNuJ3Qgc3VwcG9ydGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwLgogKiBAbmFtZSByZWZlcmVuY2VPYmplY3QKICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGF0YS5nZXRCb3VuZGluZ0NsaWVudFJlY3QKICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzZXQgb2YgY29vcmRpbmF0ZXMgY29tcGF0aWJsZSB3aXRoIHRoZSBuYXRpdmUgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgbWV0aG9kLgogKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aAogKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIHdpZHRoIG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LgogKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRIZWlnaHQKICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuCiAqLwoKClBvcHBlci5VdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7ClBvcHBlci5wbGFjZW1lbnRzID0gcGxhY2VtZW50czsKUG9wcGVyLkRlZmF1bHRzID0gRGVmYXVsdHM7CmV4cG9ydCBkZWZhdWx0IFBvcHBlcjs="},{"version":3,"sources":["../../src/utils/isBrowser.js","../../src/utils/debounce.js","../../src/utils/isFunction.js","../../src/utils/getStyleComputedProperty.js","../../src/utils/getParentNode.js","../../src/utils/getScrollParent.js","../../src/utils/getReferenceNode.js","../../src/utils/isIE.js","../../src/utils/getOffsetParent.js","../../src/utils/isOffsetContainer.js","../../src/utils/getRoot.js","../../src/utils/findCommonOffsetParent.js","../../src/utils/getScroll.js","../../src/utils/includeScroll.js","../../src/utils/getBordersSize.js","../../src/utils/getWindowSizes.js","../../src/utils/getClientRect.js","../../src/utils/getBoundingClientRect.js","../../src/utils/getOffsetRectRelativeToArbitraryNode.js","../../src/utils/getViewportOffsetRectRelativeToArtbitraryNode.js","../../src/utils/isFixed.js","../../src/utils/getFixedPositionOffsetParent.js","../../src/utils/getBoundaries.js","../../src/utils/computeAutoPlacement.js","../../src/utils/getReferenceOffsets.js","../../src/utils/getOuterSizes.js","../../src/utils/getOppositePlacement.js","../../src/utils/getPopperOffsets.js","../../src/utils/find.js","../../src/utils/findIndex.js","../../src/utils/runModifiers.js","../../src/methods/update.js","../../src/utils/isModifierEnabled.js","../../src/utils/getSupportedPropertyName.js","../../src/methods/destroy.js","../../src/utils/getWindow.js","../../src/utils/setupEventListeners.js","../../src/methods/enableEventListeners.js","../../src/utils/removeEventListeners.js","../../src/methods/disableEventListeners.js","../../src/utils/isNumeric.js","../../src/utils/setStyles.js","../../src/utils/setAttributes.js","../../src/modifiers/applyStyle.js","../../src/utils/getRoundedOffsets.js","../../src/modifiers/computeStyle.js","../../src/utils/isModifierRequired.js","../../src/modifiers/arrow.js","../../src/utils/getOppositeVariation.js","../../src/methods/placements.js","../../src/utils/clockwise.js","../../src/modifiers/flip.js","../../src/modifiers/keepTogether.js","../../src/modifiers/offset.js","../../src/modifiers/preventOverflow.js","../../src/modifiers/shift.js","../../src/modifiers/hide.js","../../src/modifiers/inner.js","../../src/modifiers/index.js","../../src/methods/defaults.js","../../src/index.js"],"names":["timeoutDuration","longerTimeoutBrowsers","i","isBrowser","navigator","called","scheduled","supportsMicroTasks","window","getType","functionToCheck","element","css","property","document","overflow","overflowX","overflowY","getStyleComputedProperty","getScrollParent","getParentNode","reference","isIE11","isIE10","version","noOffsetParent","isIE","offsetParent","nodeName","getOffsetParent","node","getRoot","element1","element2","order","Node","start","end","range","commonAncestorContainer","isOffsetContainer","element1root","findCommonOffsetParent","side","upperSide","html","scrollingElement","subtract","scrollTop","getScroll","scrollLeft","modifier","sideA","axis","sideB","parseFloat","styles","Math","body","parseInt","computedStyle","getComputedStyle","getSize","offsets","height","rect","result","top","sizes","getWindowSizes","width","horizScrollbar","vertScrollbar","getBordersSize","getClientRect","fixedPosition","runIsIE","isHTML","parent","childrenRect","getBoundingClientRect","parentRect","scrollParent","borderTopWidth","borderLeftWidth","marginTop","marginLeft","includeScroll","excludeScroll","relativeOffset","getOffsetRectRelativeToArbitraryNode","offset","parentNode","isFixed","el","boundaries","left","getFixedPositionOffsetParent","getReferenceNode","boundariesElement","getViewportOffsetRectRelativeToArtbitraryNode","boundariesNode","popper","padding","isPaddingNumber","placement","getBoundaries","rects","refRect","bottom","sortedAreas","getArea","b","a","filteredAreas","computedPlacement","variation","commonOffsetParent","x","y","hash","right","popperRect","getOuterSizes","popperOffsets","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","referenceOffsets","getOppositePlacement","Array","arr","cur","match","obj","modifiersToRun","ends","modifiers","findIndex","fn","isFunction","data","getReferenceOffsets","computeAutoPlacement","getPopperOffsets","runModifiers","name","enabled","prefixes","upperProp","prefix","toCheck","isModifierEnabled","getSupportedPropertyName","ownerDocument","isBody","target","passive","state","scrollElement","setupEventListeners","removeEventListeners","n","isNaN","isFinite","unit","isNumeric","value","attributes","Object","options","position","round","floor","noRound","referenceWidth","popperWidth","isVertical","isVariation","sameWidthParity","bothOddWidth","horizontalToInteger","verticalToInteger","isFirefox","legacyGpuAccelerationOption","gpuAcceleration","offsetParentRect","getRoundedOffsets","prefixedProperty","invertTop","invertLeft","requesting","isRequired","requested","isModifierRequired","arrowElement","len","sideCapitalized","altSide","opSide","arrowElementSize","center","popperMarginSide","popperBorderSide","sideValue","validPlacements","placements","counter","index","BEHAVIORS","placementOpposite","flipOrder","clockwise","refOffsets","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariationByRef","flippedVariationByContent","flippedVariation","getOppositeVariation","split","str","size","useHeight","fragments","frag","divider","splitRegex","ops","mergeWithPrevious","toValue","op","index2","basePlacement","parseOffset","transformProp","popperStyles","transform","check","shiftvariation","shiftOffsets","bound","subtractLength","shift","keepTogether","inner","hide","undefined","Popper","debounce","modifierOptions","eventsEnabled","update","destroy","enableEventListeners","disableEventListeners","requestAnimationFrame","Utils","PopperUtils","Defaults"],"mappings":"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","sourcesContent":["export default typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n","import isBrowser from './isBrowser';\n\nconst timeoutDuration = (function(){\n  const longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (let i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}());\n\nexport function microtaskDebounce(fn) {\n  let called = false\n  return () => {\n    if (called) {\n      return\n    }\n    called = true\n    window.Promise.resolve().then(() => {\n      called = false\n      fn()\n    })\n  }\n}\n\nexport function taskDebounce(fn) {\n  let scheduled = false;\n  return () => {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(() => {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nconst supportsMicroTasks = isBrowser && window.Promise\n\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nexport default (supportsMicroTasks\n  ? microtaskDebounce\n  : taskDebounce);\n","/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nexport default function isFunction(functionToCheck) {\n  const getType = {};\n  return (\n    functionToCheck &&\n    getType.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n","/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nexport default function getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  const window = element.ownerDocument.defaultView;\n  const css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n","/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nexport default function getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nexport default function getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body\n    case '#document':\n      return element.body\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n  const { overflow, overflowX, overflowY } = getStyleComputedProperty(element);\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n","/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nexport default function getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n","import isBrowser from './isBrowser';\n\nconst isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nconst isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nexport default function isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nexport default function getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  const noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  let offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  const nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (\n    ['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 &&\n    getStyleComputedProperty(offsetParent, 'position') === 'static'\n  ) {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n","import getOffsetParent from './getOffsetParent';\n\nexport default function isOffsetContainer(element) {\n  const { nodeName } = element;\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return (\n    nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element\n  );\n}\n","/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nexport default function getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n","import isOffsetContainer from './isOffsetContainer';\nimport getRoot from './getRoot';\nimport getOffsetParent from './getOffsetParent';\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nexport default function findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  const order =\n    element1.compareDocumentPosition(element2) &\n    Node.DOCUMENT_POSITION_FOLLOWING;\n  const start = order ? element1 : element2;\n  const end = order ? element2 : element1;\n\n  // Get common ancestor container\n  const range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  const { commonAncestorContainer } = range;\n\n  // Both nodes are inside #document\n  if (\n    (element1 !== commonAncestorContainer &&\n      element2 !== commonAncestorContainer) ||\n    start.contains(end)\n  ) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  const element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n","/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nexport default function getScroll(element, side = 'top') {\n  const upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  const nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    const html = element.ownerDocument.documentElement;\n    const scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n","import getScroll from './getScroll';\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nexport default function includeScroll(rect, element, subtract = false) {\n  const scrollTop = getScroll(element, 'top');\n  const scrollLeft = getScroll(element, 'left');\n  const modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n","/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nexport default function getBordersSize(styles, axis) {\n  const sideA = axis === 'x' ? 'Left' : 'Top';\n  const sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return (\n    parseFloat(styles[`border${sideA}Width`]) +\n    parseFloat(styles[`border${sideB}Width`])\n  );\n}\n","import isIE from './isIE';\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(\n    body[`offset${axis}`],\n    body[`scroll${axis}`],\n    html[`client${axis}`],\n    html[`offset${axis}`],\n    html[`scroll${axis}`],\n    isIE(10)\n      ? (parseInt(html[`offset${axis}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Top' : 'Left'}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Bottom' : 'Right'}`]))\n    : 0 \n  );\n}\n\nexport default function getWindowSizes(document) {\n  const body = document.body;\n  const html = document.documentElement;\n  const computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle),\n  };\n}\n","/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nexport default function getClientRect(offsets) {\n  return {\n    ...offsets,\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height,\n  };\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getBordersSize from './getBordersSize';\nimport getWindowSizes from './getWindowSizes';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\nimport isIE from './isIE';\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nexport default function getBoundingClientRect(element) {\n  let rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      const scrollTop = getScroll(element, 'top');\n      const scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    }\n    else {\n      rect = element.getBoundingClientRect();\n    }\n  }\n  catch(e){}\n\n  const result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top,\n  };\n\n  // subtract scrollbar size from sizes\n  const sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  const width =\n    sizes.width || element.clientWidth || result.width;\n  const height =\n    sizes.height || element.clientHeight || result.height;\n\n  let horizScrollbar = element.offsetWidth - width;\n  let vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    const styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport includeScroll from './includeScroll';\nimport getScrollParent from './getScrollParent';\nimport getBoundingClientRect from './getBoundingClientRect';\nimport runIsIE from './isIE';\nimport getClientRect from './getClientRect';\n\nexport default function getOffsetRectRelativeToArbitraryNode(children, parent, fixedPosition = false) {\n  const isIE10 = runIsIE(10);\n  const isHTML = parent.nodeName === 'HTML';\n  const childrenRect = getBoundingClientRect(children);\n  const parentRect = getBoundingClientRect(parent);\n  const scrollParent = getScrollParent(children);\n\n  const styles = getStyleComputedProperty(parent);\n  const borderTopWidth = parseFloat(styles.borderTopWidth);\n  const borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if(fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  let offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height,\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    const marginTop = parseFloat(styles.marginTop);\n    const marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (\n    isIE10 && !fixedPosition\n      ? parent.contains(scrollParent)\n      : parent === scrollParent && scrollParent.nodeName !== 'BODY'\n  ) {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n","import getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\n\nexport default function getViewportOffsetRectRelativeToArtbitraryNode(element, excludeScroll = false) {\n  const html = element.ownerDocument.documentElement;\n  const relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  const width = Math.max(html.clientWidth, window.innerWidth || 0);\n  const height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  const scrollTop = !excludeScroll ? getScroll(html) : 0;\n  const scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  const offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width,\n    height,\n  };\n\n  return getClientRect(offset);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nexport default function isFixed(element) {\n  const nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  const parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nexport default function getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n   if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  let el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n\n}\n","import getScrollParent from './getScrollParent';\nimport getParentNode from './getParentNode';\nimport getReferenceNode from './getReferenceNode';\nimport findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getViewportOffsetRectRelativeToArtbitraryNode from './getViewportOffsetRectRelativeToArtbitraryNode';\nimport getWindowSizes from './getWindowSizes';\nimport isFixed from './isFixed';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nexport default function getBoundaries(\n  popper,\n  reference,\n  padding,\n  boundariesElement,\n  fixedPosition = false\n) {\n  // NOTE: 1 DOM access here\n\n  let boundaries = { top: 0, left: 0 };\n  const offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport' ) {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  }\n\n  else {\n    // Handle other cases based on DOM element used as boundaries\n    let boundariesNode;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    const offsets = getOffsetRectRelativeToArbitraryNode(\n      boundariesNode,\n      offsetParent,\n      fixedPosition\n    );\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      const { height, width } = getWindowSizes(popper.ownerDocument);\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  const isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0; \n  boundaries.top += isPaddingNumber ? padding : padding.top || 0; \n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0; \n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0; \n\n  return boundaries;\n}\n","import getBoundaries from '../utils/getBoundaries';\n\nfunction getArea({ width, height }) {\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeAutoPlacement(\n  placement,\n  refRect,\n  popper,\n  reference,\n  boundariesElement,\n  padding = 0\n) {\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  const boundaries = getBoundaries(\n    popper,\n    reference,\n    padding,\n    boundariesElement\n  );\n\n  const rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top,\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height,\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom,\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height,\n    },\n  };\n\n  const sortedAreas = Object.keys(rects)\n    .map(key => ({\n      key,\n      ...rects[key],\n      area: getArea(rects[key]),\n    }))\n    .sort((a, b) => b.area - a.area);\n\n  const filteredAreas = sortedAreas.filter(\n    ({ width, height }) =>\n      width >= popper.clientWidth && height >= popper.clientHeight\n  );\n\n  const computedPlacement = filteredAreas.length > 0\n    ? filteredAreas[0].key\n    : sortedAreas[0].key;\n\n  const variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? `-${variation}` : '');\n}\n","import findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\nimport getReferenceNode from './getReferenceNode';\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nexport default function getReferenceOffsets(state, popper, reference, fixedPosition = null) {\n  const commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n","/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nexport default function getOuterSizes(element) {\n  const window = element.ownerDocument.defaultView;\n  const styles = window.getComputedStyle(element);\n  const x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  const y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  const result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x,\n  };\n  return result;\n}\n","/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nexport default function getOppositePlacement(placement) {\n  const hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, matched => hash[matched]);\n}\n","import getOuterSizes from './getOuterSizes';\nimport getOppositePlacement from './getOppositePlacement';\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nexport default function getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  const popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  const popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height,\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  const isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  const mainSide = isHoriz ? 'top' : 'left';\n  const secondarySide = isHoriz ? 'left' : 'top';\n  const measurement = isHoriz ? 'height' : 'width';\n  const secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] =\n    referenceOffsets[mainSide] +\n    referenceOffsets[measurement] / 2 -\n    popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] =\n      referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] =\n      referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n","/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n","import find from './find';\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(cur => cur[prop] === value);\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  const match = find(arr, obj => obj[prop] === value);\n  return arr.indexOf(match);\n}\n","import isFunction from './isFunction';\nimport findIndex from './findIndex';\nimport getClientRect from '../utils/getClientRect';\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nexport default function runModifiers(modifiers, data, ends) {\n  const modifiersToRun = ends === undefined\n    ? modifiers\n    : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(modifier => {\n    if (modifier['function']) { // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    const fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n","import computeAutoPlacement from '../utils/computeAutoPlacement';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nexport default function update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  let data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {},\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(\n    this.state,\n    this.popper,\n    this.reference,\n    this.options.positionFixed\n  );\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(\n    this.options.placement,\n    data.offsets.reference,\n    this.popper,\n    this.reference,\n    this.options.modifiers.flip.boundariesElement,\n    this.options.modifiers.flip.padding\n  );\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(\n    this.popper,\n    data.offsets.reference,\n    data.placement\n  );\n\n  data.offsets.popper.position = this.options.positionFixed\n    ? 'fixed'\n    : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n","/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nexport default function isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(\n    ({ name, enabled }) => enabled && name === modifierName\n  );\n}\n","/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nexport default function getSupportedPropertyName(property) {\n  const prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  const upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefix = prefixes[i];\n    const toCheck = prefix ? `${prefix}${upperProp}` : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n","import isModifierEnabled from '../utils/isModifierEnabled';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nexport default function destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n","/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nexport default function getWindow(element) {\n  const ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n","import getScrollParent from './getScrollParent';\nimport getWindow from './getWindow';\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  const isBody = scrollParent.nodeName === 'BODY';\n  const target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(\n      getScrollParent(target.parentNode),\n      event,\n      callback,\n      scrollParents\n    );\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function setupEventListeners(\n  reference,\n  options,\n  state,\n  updateBound\n) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  const scrollElement = getScrollParent(reference);\n  attachToScrollParents(\n    scrollElement,\n    'scroll',\n    state.updateBound,\n    state.scrollParents\n  );\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n","import setupEventListeners from '../utils/setupEventListeners';\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nexport default function enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(\n      this.reference,\n      this.options,\n      this.state,\n      this.scheduleUpdate\n    );\n  }\n}\n","import getWindow from './getWindow';\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(target => {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n","import removeEventListeners from '../utils/removeEventListeners';\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nexport default function disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n","/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nexport default function isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n","import isNumeric from './isNumeric';\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setStyles(element, styles) {\n  Object.keys(styles).forEach(prop => {\n    let unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (\n      ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !==\n        -1 &&\n      isNumeric(styles[prop])\n    ) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n","/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function(prop) {\n    const value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n","import setStyles from '../utils/setStyles';\nimport setAttributes from '../utils/setAttributes';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nexport default function applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nexport function applyStyleOnLoad(\n  reference,\n  popper,\n  options,\n  modifierOptions,\n  state\n) {\n  // compute reference element offsets\n  const referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  const placement = computeAutoPlacement(\n    options.placement,\n    referenceOffsets,\n    popper,\n    reference,\n    options.modifiers.flip.boundariesElement,\n    options.modifiers.flip.padding\n  );\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n","/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nexport default function getRoundedOffsets(data, shouldRound) {\n  const { popper, reference } = data.offsets;\n  const { round, floor } = Math;\n  const noRound = v => v;\n  \n  const referenceWidth = round(reference.width);\n  const popperWidth = round(popper.width);\n  \n  const isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  const isVariation = data.placement.indexOf('-') !== -1;\n  const sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  const bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  const horizontalToInteger = !shouldRound\n    ? noRound\n    : isVertical || isVariation || sameWidthParity\n    ? round\n    : floor;\n  const verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(\n      bothOddWidth && !isVariation && shouldRound\n        ? popper.left - 1\n        : popper.left\n    ),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right),\n  };\n}\n","import getSupportedPropertyName from '../utils/getSupportedPropertyName';\nimport find from '../utils/find';\nimport getOffsetParent from '../utils/getOffsetParent';\nimport getBoundingClientRect from '../utils/getBoundingClientRect';\nimport getRoundedOffsets from '../utils/getRoundedOffsets';\nimport isBrowser from '../utils/isBrowser';\n\nconst isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeStyle(data, options) {\n  const { x, y } = options;\n  const { popper } = data.offsets;\n\n  // Remove this legacy support in Popper.js v2\n  const legacyGpuAccelerationOption = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'applyStyle'\n  ).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn(\n      'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!'\n    );\n  }\n  const gpuAcceleration =\n    legacyGpuAccelerationOption !== undefined\n      ? legacyGpuAccelerationOption\n      : options.gpuAcceleration;\n\n  const offsetParent = getOffsetParent(data.instance.popper);\n  const offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  const styles = {\n    position: popper.position,\n  };\n\n  const offsets = getRoundedOffsets(\n    data,\n    window.devicePixelRatio < 2 || !isFirefox\n  );\n\n  const sideA = x === 'bottom' ? 'top' : 'bottom';\n  const sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  const prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  let left, top;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = `translate3d(${left}px, ${top}px, 0)`;\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    const invertTop = sideA === 'bottom' ? -1 : 1;\n    const invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = `${sideA}, ${sideB}`;\n  }\n\n  // Attributes\n  const attributes = {\n    'x-placement': data.placement,\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = { ...attributes, ...data.attributes };\n  data.styles = { ...styles, ...data.styles };\n  data.arrowStyles = { ...data.offsets.arrow, ...data.arrowStyles };\n\n  return data;\n}\n","import find from './find';\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nexport default function isModifierRequired(\n  modifiers,\n  requestingName,\n  requestedName\n) {\n  const requesting = find(modifiers, ({ name }) => name === requestingName);\n\n  const isRequired =\n    !!requesting &&\n    modifiers.some(modifier => {\n      return (\n        modifier.name === requestedName &&\n        modifier.enabled &&\n        modifier.order < requesting.order\n      );\n    });\n\n  if (!isRequired) {\n    const requesting = `\\`${requestingName}\\``;\n    const requested = `\\`${requestedName}\\``;\n    console.warn(\n      `${requested} modifier is required by ${requesting} modifier in order to work, be sure to include it before ${requesting}!`\n    );\n  }\n  return isRequired;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOuterSizes from '../utils/getOuterSizes';\nimport isModifierRequired from '../utils/isModifierRequired';\nimport getStyleComputedProperty from '../utils/getStyleComputedProperty';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  let arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn(\n        'WARNING: `arrow.element` must be child of its popper element!'\n      );\n      return data;\n    }\n  }\n\n  const placement = data.placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  const len = isVertical ? 'height' : 'width';\n  const sideCapitalized = isVertical ? 'Top' : 'Left';\n  const side = sideCapitalized.toLowerCase();\n  const altSide = isVertical ? 'left' : 'top';\n  const opSide = isVertical ? 'bottom' : 'right';\n  const arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -=\n      popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] +=\n      reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  const center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  const css = getStyleComputedProperty(data.instance.popper);\n  const popperMarginSide = parseFloat(css[`margin${sideCapitalized}`]);\n  const popperBorderSide = parseFloat(css[`border${sideCapitalized}Width`]);\n  let sideValue =\n    center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {\n    [side]: Math.round(sideValue),\n    [altSide]: '', // make sure to unset any eventual altSide value from the DOM node\n  };\n\n  return data;\n}\n","/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nexport default function getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n","/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nexport default [\n  'auto-start',\n  'auto',\n  'auto-end',\n  'top-start',\n  'top',\n  'top-end',\n  'right-start',\n  'right',\n  'right-end',\n  'bottom-end',\n  'bottom',\n  'bottom-start',\n  'left-end',\n  'left',\n  'left-start',\n];\n","import placements from '../methods/placements';\n\n// Get rid of `auto` `auto-start` and `auto-end`\nconst validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nexport default function clockwise(placement, counter = false) {\n  const index = validPlacements.indexOf(placement);\n  const arr = validPlacements\n    .slice(index + 1)\n    .concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n","import getOppositePlacement from '../utils/getOppositePlacement';\nimport getOppositeVariation from '../utils/getOppositeVariation';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\nimport getBoundaries from '../utils/getBoundaries';\nimport isModifierEnabled from '../utils/isModifierEnabled';\nimport clockwise from '../utils/clockwise';\n\nconst BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise',\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    options.boundariesElement,\n    data.positionFixed\n  );\n\n  let placement = data.placement.split('-')[0];\n  let placementOpposite = getOppositePlacement(placement);\n  let variation = data.placement.split('-')[1] || '';\n\n  let flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach((step, index) => {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    const popperOffsets = data.offsets.popper;\n    const refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    const floor = Math.floor;\n    const overlapsRef =\n      (placement === 'left' &&\n        floor(popperOffsets.right) > floor(refOffsets.left)) ||\n      (placement === 'right' &&\n        floor(popperOffsets.left) < floor(refOffsets.right)) ||\n      (placement === 'top' &&\n        floor(popperOffsets.bottom) > floor(refOffsets.top)) ||\n      (placement === 'bottom' &&\n        floor(popperOffsets.top) < floor(refOffsets.bottom));\n\n    const overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    const overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    const overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    const overflowsBottom =\n      floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    const overflowsBoundaries =\n      (placement === 'left' && overflowsLeft) ||\n      (placement === 'right' && overflowsRight) ||\n      (placement === 'top' && overflowsTop) ||\n      (placement === 'bottom' && overflowsBottom);\n\n    // flip the variation if required\n    const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    const flippedVariationByRef =\n      !!options.flipVariations &&\n      ((isVertical && variation === 'start' && overflowsLeft) ||\n        (isVertical && variation === 'end' && overflowsRight) ||\n        (!isVertical && variation === 'start' && overflowsTop) ||\n        (!isVertical && variation === 'end' && overflowsBottom));\n\n    // flips variation if popper content overflows boundaries\n    const flippedVariationByContent =\n      !!options.flipVariationsByContent &&\n      ((isVertical && variation === 'start' && overflowsRight) ||\n        (isVertical && variation === 'end' && overflowsLeft) ||\n        (!isVertical && variation === 'start' && overflowsBottom) ||\n        (!isVertical && variation === 'end' && overflowsTop));\n\n    const flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = {\n        ...data.offsets.popper,\n        ...getPopperOffsets(\n          data.instance.popper,\n          data.offsets.reference,\n          data.placement\n        ),\n      };\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function keepTogether(data) {\n  const { popper, reference } = data.offsets;\n  const placement = data.placement.split('-')[0];\n  const floor = Math.floor;\n  const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  const side = isVertical ? 'right' : 'bottom';\n  const opSide = isVertical ? 'left' : 'top';\n  const measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] =\n      floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n","import isNumeric from '../utils/isNumeric';\nimport getClientRect from '../utils/getClientRect';\nimport find from '../utils/find';\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nexport function toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  const split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  const value = +split[1];\n  const unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    let element;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    const rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    let size;\n    if (unit === 'vh') {\n      size = Math.max(\n        document.documentElement.clientHeight,\n        window.innerHeight || 0\n      );\n    } else {\n      size = Math.max(\n        document.documentElement.clientWidth,\n        window.innerWidth || 0\n      );\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nexport function parseOffset(\n  offset,\n  popperOffsets,\n  referenceOffsets,\n  basePlacement\n) {\n  const offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  const useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  const fragments = offset.split(/(\\+|\\-)/).map(frag => frag.trim());\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  const divider = fragments.indexOf(\n    find(fragments, frag => frag.search(/,|\\s/) !== -1)\n  );\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn(\n      'Offsets separated by white space(s) are deprecated, use a comma (,) instead.'\n    );\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  const splitRegex = /\\s*,\\s*|\\s+/;\n  let ops = divider !== -1\n    ? [\n        fragments\n          .slice(0, divider)\n          .concat([fragments[divider].split(splitRegex)[0]]),\n        [fragments[divider].split(splitRegex)[1]].concat(\n          fragments.slice(divider + 1)\n        ),\n      ]\n    : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map((op, index) => {\n    // Most of the units rely on the orientation of the popper\n    const measurement = (index === 1 ? !useHeight : useHeight)\n      ? 'height'\n      : 'width';\n    let mergeWithPrevious = false;\n    return (\n      op\n        // This aggregates any `+` or `-` sign that aren't considered operators\n        // e.g.: 10 + +5 => [10, +, +5]\n        .reduce((a, b) => {\n          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n            a[a.length - 1] = b;\n            mergeWithPrevious = true;\n            return a;\n          } else if (mergeWithPrevious) {\n            a[a.length - 1] += b;\n            mergeWithPrevious = false;\n            return a;\n          } else {\n            return a.concat(b);\n          }\n        }, [])\n        // Here we convert the string values into number values (in px)\n        .map(str => toValue(str, measurement, popperOffsets, referenceOffsets))\n    );\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach((op, index) => {\n    op.forEach((frag, index2) => {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nexport default function offset(data, { offset }) {\n  const { placement, offsets: { popper, reference } } = data;\n  const basePlacement = placement.split('-')[0];\n\n  let offsets;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n","import getOffsetParent from '../utils/getOffsetParent';\nimport getBoundaries from '../utils/getBoundaries';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function preventOverflow(data, options) {\n  let boundariesElement =\n    options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  const transformProp = getSupportedPropertyName('transform');\n  const popperStyles = data.instance.popper.style; // assignment to help minification\n  const { top, left, [transformProp]: transform } = popperStyles;\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    boundariesElement,\n    data.positionFixed\n  );\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  const order = options.priority;\n  let popper = data.offsets.popper;\n\n  const check = {\n    primary(placement) {\n      let value = popper[placement];\n      if (\n        popper[placement] < boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return { [placement]: value };\n    },\n    secondary(placement) {\n      const mainSide = placement === 'right' ? 'left' : 'top';\n      let value = popper[mainSide];\n      if (\n        popper[placement] > boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.min(\n          popper[mainSide],\n          boundaries[placement] -\n            (placement === 'right' ? popper.width : popper.height)\n        );\n      }\n      return { [mainSide]: value };\n    },\n  };\n\n  order.forEach(placement => {\n    const side =\n      ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = { ...popper, ...check[side](placement) };\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function shift(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    const { reference, popper } = data.offsets;\n    const isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    const side = isVertical ? 'left' : 'top';\n    const measurement = isVertical ? 'width' : 'height';\n\n    const shiftOffsets = {\n      start: { [side]: reference[side] },\n      end: {\n        [side]: reference[side] + reference[measurement] - popper[measurement],\n      },\n    };\n\n    data.offsets.popper = { ...popper, ...shiftOffsets[shiftvariation] };\n  }\n\n  return data;\n}\n","import isModifierRequired from '../utils/isModifierRequired';\nimport find from '../utils/find';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  const refRect = data.offsets.reference;\n  const bound = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'preventOverflow'\n  ).boundaries;\n\n  if (\n    refRect.bottom < bound.top ||\n    refRect.left > bound.right ||\n    refRect.top > bound.bottom ||\n    refRect.right < bound.left\n  ) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOppositePlacement from '../utils/getOppositePlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function inner(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  const subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] =\n    reference[basePlacement] -\n    (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n","import applyStyle, { applyStyleOnLoad } from './applyStyle';\nimport computeStyle from './computeStyle';\nimport arrow from './arrow';\nimport flip from './flip';\nimport keepTogether from './keepTogether';\nimport offset from './offset';\nimport preventOverflow from './preventOverflow';\nimport shift from './shift';\nimport hide from './hide';\nimport inner from './inner';\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nexport default {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift,\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0,\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent',\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether,\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]',\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false,\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner,\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide,\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right',\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined,\n  },\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n","import modifiers from '../modifiers/index';\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nexport default {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: () => {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: () => {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers,\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n","// Utils\nimport debounce from './utils/debounce';\nimport isFunction from './utils/isFunction';\n\n// Methods\nimport update from './methods/update';\nimport destroy from './methods/destroy';\nimport enableEventListeners from './methods/enableEventListeners';\nimport disableEventListeners from './methods/disableEventListeners';\nimport Defaults from './methods/defaults';\nimport placements from './methods/placements';\n\nexport default class Popper {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  constructor(reference, popper, options = {}) {\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = { ...Popper.Defaults, ...options };\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: [],\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys({\n      ...Popper.Defaults.modifiers,\n      ...options.modifiers,\n    }).forEach(name => {\n      this.options.modifiers[name] = {\n        // If it's a built-in modifier, use it as base\n        ...(Popper.Defaults.modifiers[name] || {}),\n        // If there are custom options, override and merge with default ones\n        ...(options.modifiers ? options.modifiers[name] : {}),\n      };\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers)\n      .map(name => ({\n        name,\n        ...this.options.modifiers[name],\n      }))\n      // sort the modifiers by order\n      .sort((a, b) => a.order - b.order);\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(modifierOptions => {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(\n          this.reference,\n          this.popper,\n          this.options,\n          modifierOptions,\n          this.state\n        );\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    const eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n  update() {\n    return update.call(this);\n  }\n  destroy() {\n    return destroy.call(this);\n  }\n  enableEventListeners() {\n    return enableEventListeners.call(this);\n  }\n  disableEventListeners() {\n    return disableEventListeners.call(this);\n  }\n\n  /**\n   * Schedules an update. It will run on the next UI update available.\n   * @method scheduleUpdate\n   * @memberof Popper\n   */\n  scheduleUpdate = () => requestAnimationFrame(this.update);\n\n  /**\n   * Collection of utilities useful when writing custom modifiers.\n   * Starting from version 1.7, this method is available only if you\n   * include `popper-utils.js` before `popper.js`.\n   *\n   * **DEPRECATION**: This way to access PopperUtils is deprecated\n   * and will be removed in v2! Use the PopperUtils module directly instead.\n   * Due to the high instability of the methods contained in Utils, we can't\n   * guarantee them to follow semver. Use them at your own risk!\n   * @static\n   * @private\n   * @type {Object}\n   * @deprecated since version 1.8\n   * @member Utils\n   * @memberof Popper\n   */\n  static Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\n\n  static placements = placements;\n\n  static Defaults = Defaults;\n}\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n"]}]}