{"remainingRequest":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/thread-loader/dist/cjs.js!/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/babel-loader/lib/index.js!/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/vuestic-ui/node_modules/approximate-number/lib/approximate-number.js","dependencies":[{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/vuestic-ui/node_modules/approximate-number/lib/approximate-number.js","mtime":1481747125000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:cmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbiIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJldmVyc2UiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmciKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZSIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giKTsKCnZhciBfdHlwZW9mID0gcmVxdWlyZSgiL21udC9kL1dvcmtpbmdfQXJlYS9ERVYvQ1VTVE9NRVJTL29ueXhpYW4vYWRtaW4vbm9kZV9tb2R1bGVzL0B2dWUvYmFiZWwtcHJlc2V0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YiKTsKCi8qIEFwcHJveGltYXRlIE51bWJlciAtIG91dHB1dHMgbnVtYmVycyBpbiBodW1hbi1yZWFkYWJsZSBmb3JtYXQsIHNpbWlsYXIgdG8gbHMgLWxoIG9yIFN0YWNrIE92ZXJmbG93J3MgcmVwdXRhdGlvbgogKgogKiBodHRwczovL2dpdGh1Yi5jb20vbmZyaWVkbHkvYXBwcm94aW1hdGUtbnVtYmVyCiAqCiAqIENvcHlyaWdodCAoYykgMjAxNCBOYXRoYW4gRnJpZWRseQogKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqLwooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgZnVuY3Rpb24gYWRkQ29tbWFzKG51bSwgb3B0cykgewogICAgaWYgKG9wdHMuc2VwYXJhdG9yID09PSBmYWxzZSkgewogICAgICByZXR1cm4gbnVtLnRvU3RyaW5nKCk7CiAgICB9CgogICAgaWYgKG51bSA8IDEwMDApIHsKICAgICAgcmV0dXJuIG51bS50b1N0cmluZygpOwogICAgfQoKICAgIHZhciBzZXBhcmF0b3IgPSB0eXBlb2Ygb3B0cy5zZXBhcmF0b3IgPT09ICdzdHJpbmcnID8gb3B0cy5zZXBhcmF0b3IgOiAnLCc7CiAgICB2YXIgb3V0ID0gW10sCiAgICAgICAgZGlnaXRzID0gTWF0aC5yb3VuZChudW0pLnRvU3RyaW5nKCkuc3BsaXQoJycpOwogICAgZGlnaXRzLnJldmVyc2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChkaWdpdCwgaSkgewogICAgICBpZiAoaSAmJiBpICUgMyA9PT0gMCkgewogICAgICAgIG91dC5wdXNoKHNlcGFyYXRvcik7CiAgICAgIH0KCiAgICAgIG91dC5wdXNoKGRpZ2l0KTsKICAgIH0pOwogICAgcmV0dXJuIG91dC5yZXZlcnNlKCkuam9pbignJyk7CiAgfQoKICBmdW5jdGlvbiBmb3JtYXREZWMobnVtLCBiYXNlLCBvcHRzKSB7CiAgICB2YXIgd29ya2luZ051bSA9IG51bSAvIGJhc2U7CiAgICB2YXIgUk9VTkQgPSBvcHRzLnJvdW5kID8gJ3JvdW5kJyA6ICdmbG9vcic7CgogICAgaWYgKG9wdHMuZGVjaW1hbCA9PT0gZmFsc2UpIHsKICAgICAgbnVtID0gTWF0aFtST1VORF0od29ya2luZ051bSk7CiAgICAgIHJldHVybiBudW0udG9TdHJpbmcoKTsKICAgIH0KCiAgICBudW0gPSB3b3JraW5nTnVtIDwgMTAgPyBNYXRoW1JPVU5EXSh3b3JraW5nTnVtICogMTApIC8gMTAgOiBNYXRoW1JPVU5EXSh3b3JraW5nTnVtKTsKICAgIG51bSA9IG51bS50b1N0cmluZygpOwoKICAgIGlmICh0eXBlb2Ygb3B0cy5kZWNpbWFsID09PSAnc3RyaW5nJykgewogICAgICBudW0gPSBudW0ucmVwbGFjZSgnLicsIG9wdHMuZGVjaW1hbCk7CiAgICB9CgogICAgcmV0dXJuIG51bTsKICB9CgogIHZhciBUSE9VU0FORCA9IDEwMDA7CiAgdmFyIFRFTl9USE9VU0FORCA9IDEwMDAwOwogIHZhciBNSUxMSU9OID0gMTAwMDAwMDsKICB2YXIgQklMTElPTiA9IDEwMDAwMDAwMDA7CiAgdmFyIFRSSUxMSU9OID0gMTAwMDAwMDAwMDAwMDsKICAvKioKICAgKiBDb252ZXJ0cyBiaWcgbnVtYmVycyBpbnRvIGh1bWFuLXJlYWRhYmxlIGZvcm1zCiAgICogQHBhcmFtIHtOdW1iZXJ9IG51bQogICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0c10KICAgKiBAcGFyYW0ge1N0cmluZ3xCb29sZWFufSBbb3B0cy5zZXBhcmF0b3I9JywnXSAgVGhvdXNhbmRzIHNlcGFyYXRvciAtIHNldCB0byBhIHN0cmluZyAoZS5nLiAnLicpIHRvIHVzZSB0aGF0IHN0cmluZyBvciBmYWxzZSB0byBub3QgdXNlIGFueSBzZXBhcmF0b3IKICAgKiBAcGFyYW0ge1N0cmluZ3xCb29sZWFufSBbb3B0cy5kZWNpbWFsPScuJ10gRGVjaW1hbCAtIHNldCB0byBhIHN0cmluZyAoZS5nLiAnLCcpIHRvIHVzZSB0aGF0IG9yIHNldCB0byBmYWxzZSB0byBhdm9pZCBvdXRwdXR0aW5nIHZhbHVlcyB3aXRoIGEgZGVjaW1hbAogICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMucm91bmQ9ZmFsc2VdIFJvdW5kIG51bWJlcnMgb2ZmIHJhdGhlciB0aGFuIGZsb29yaW5nL3RydW5jYXRpbmcuIFdoZW4gdHJ1ZSwgMTA1MDAwIHdvdWxkIGJlY29tZSAnMTFtJywgd2hlbiBmYWxzZSBpdCBiZWNvbWVzICcxMG0nCiAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0cy5taW4xMGs9ZmFsc2VdIERvIG5vdCBhYmJyZXZpYXRlIG51bWJlcnMgYmVsb3cgMTAwMDAuIEUuZy4gOTk5OSB3b3VsZCBiZWNvbWUgJzksOTk5JyByYXRoZXIgdGhhbiAnOWsnLiAoU3RhY2sgT3ZlcmZsb3ctc3R5bGUpCiAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLnByZWZpeD0nJ10gT3B0aW9uYWwgc3RyaW5nIHRvIHByZXBlbmQgdG8gdGhlIHZhbHVlLCBlLmcuICckJwogICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5zdWZmaXg9JyddIE9wdGlvbmFsIHN0cmluZyB0byBhcHBlbmQgdG8gdGhlIHZhbHVlLCBlLmcuICclJwogICAqCiAgICogQHJldHVybnMge1N0cmluZ30KICAgKi8KCiAgZnVuY3Rpb24gYXBwcm94aW1hdGVOdW1iZXIobnVtLCBvcHRzKSB7CiAgICB2YXIgbnVtU3RyaW5nOwogICAgb3B0cyA9IG9wdHMgfHwge307IC8vIGlmIHdlJ3JlIHdvcmtpbmcgb24gYSBuZWdhdGl2ZSBudW1iZXIsIGNvbnZlcnQgaXQgdG8gcG9zaXRpdmUgYW5kIHRoZW4gcHJlZml4IHRoZSBmaW5hbCByZXN1bHQgd2l0aCBhIC0KCiAgICB2YXIgbmVnYXRpdmUgPSBudW0gPCAwOwoKICAgIGlmIChuZWdhdGl2ZSkgewogICAgICBudW0gPSBNYXRoLmFicyhudW0pOwogICAgfQoKICAgIHZhciB0aG91c2FuZHNCcmVhayA9IG9wdHMubWluMTBrID8gVEVOX1RIT1VTQU5EIDogVEhPVVNBTkQ7CgogICAgaWYgKG51bSA8IHRob3VzYW5kc0JyZWFrKSB7CiAgICAgIG51bVN0cmluZyA9IGFkZENvbW1hcyhmb3JtYXREZWMobnVtLCAxLCBvcHRzKSwgb3B0cyk7CiAgICB9IGVsc2UgaWYgKG51bSA8IE1JTExJT04pIHsKICAgICAgbnVtU3RyaW5nID0gZm9ybWF0RGVjKG51bSwgVEhPVVNBTkQsIG9wdHMpICsgJ2snOwogICAgfSBlbHNlIGlmIChudW0gPCBCSUxMSU9OKSB7CiAgICAgIG51bVN0cmluZyA9IGZvcm1hdERlYyhudW0sIE1JTExJT04sIG9wdHMpICsgJ20nOwogICAgfSBlbHNlIGlmIChudW0gPCBUUklMTElPTikgewogICAgICBudW1TdHJpbmcgPSBhZGRDb21tYXMoZm9ybWF0RGVjKG51bSwgQklMTElPTiwgb3B0cyksIG9wdHMpICsgJ2InOwogICAgfSBlbHNlIHsKICAgICAgbnVtU3RyaW5nID0gYWRkQ29tbWFzKGZvcm1hdERlYyhudW0sIFRSSUxMSU9OLCBvcHRzKSwgb3B0cykgKyAndCc7CiAgICB9CgogICAgaWYgKG5lZ2F0aXZlKSB7CiAgICAgIG51bVN0cmluZyA9ICctJyArIG51bVN0cmluZzsKICAgIH0KCiAgICBpZiAob3B0cy5jYXBpdGFsKSB7CiAgICAgIG51bVN0cmluZyA9IG51bVN0cmluZy50b1VwcGVyQ2FzZSgpOwogICAgfQoKICAgIGlmIChvcHRzLnByZWZpeCkgewogICAgICBudW1TdHJpbmcgPSBvcHRzLnByZWZpeCArIG51bVN0cmluZzsKICAgIH0KCiAgICBpZiAob3B0cy5zdWZmaXgpIHsKICAgICAgbnVtU3RyaW5nID0gbnVtU3RyaW5nICsgb3B0cy5zdWZmaXg7CiAgICB9CgogICAgcmV0dXJuIG51bVN0cmluZzsKICB9CgogIGFwcHJveGltYXRlTnVtYmVyLmFkZENvbW1hcyA9IGFkZENvbW1hczsKCiAgaWYgKCh0eXBlb2YgbW9kdWxlID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZihtb2R1bGUpKSA9PT0gJ29iamVjdCcpIHsKICAgIC8vIG5vZGUuanMvY29tbW9uIGpzCiAgICBtb2R1bGUuZXhwb3J0cyA9IGFwcHJveGltYXRlTnVtYmVyOwogIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgLy8gcmVxdWlyZS5qcy9hbWQKICAgIGRlZmluZShbXSwgYXBwcm94aW1hdGVOdW1iZXIpOwogIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgIHdpbmRvdy5hcHByb3hpbWF0ZU51bWJlciA9IGFwcHJveGltYXRlTnVtYmVyOwogIH0KfSkoKTs="},{"version":3,"sources":["/mnt/d/Working_Area/DEV/CUSTOMERS/onyxian/admin/node_modules/vuestic-ui/node_modules/approximate-number/lib/approximate-number.js"],"names":["addCommas","num","opts","separator","toString","out","digits","Math","round","split","reverse","forEach","digit","i","push","join","formatDec","base","workingNum","ROUND","decimal","replace","THOUSAND","TEN_THOUSAND","MILLION","BILLION","TRILLION","approximateNumber","numString","negative","abs","thousandsBreak","min10k","capital","toUpperCase","prefix","suffix","module","exports","define","window"],"mappings":"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","sourcesContent":["/* Approximate Number - outputs numbers in human-readable format, similar to ls -lh or Stack Overflow's reputation\n *\n * https://github.com/nfriedly/approximate-number\n *\n * Copyright (c) 2014 Nathan Friedly\n * Licensed under the MIT license.\n */\n(function() {\n  'use strict';\n\n  function addCommas(num, opts) {\n    if (opts.separator === false) {\n      return num.toString();\n    }\n\n    if (num < 1000) {\n      return num.toString();\n    }\n\n    var separator = (typeof opts.separator === 'string' ? opts.separator : ',');\n\n    var out = [],\n      digits = Math.round(num).toString().split('');\n\n    digits.reverse().forEach(function(digit, i){\n      if (i && i%3 === 0) {\n        out.push(separator);\n      }\n      out.push(digit);\n    });\n\n    return out.reverse().join('');\n  }\n\n  function formatDec(num, base, opts) {\n    var workingNum = num/base;\n    var ROUND = opts.round ? 'round' : 'floor';\n    if (opts.decimal === false) {\n      num = Math[ROUND](workingNum);\n      return num.toString();\n    }\n    num = workingNum < 10 ? (Math[ROUND](workingNum * 10) / 10) : Math[ROUND](workingNum);\n    num = num.toString();\n    if (typeof opts.decimal === 'string') {\n      num = num.replace('.', opts.decimal);\n    }\n    return num;\n  }\n\n  var THOUSAND = 1000;\n  var TEN_THOUSAND = 10000;\n  var MILLION = 1000000;\n  var BILLION = 1000000000;\n  var TRILLION = 1000000000000;\n\n  /**\n   * Converts big numbers into human-readable forms\n   * @param {Number} num\n   * @param {Object} [opts]\n   * @param {String|Boolean} [opts.separator=',']  Thousands separator - set to a string (e.g. '.') to use that string or false to not use any separator\n   * @param {String|Boolean} [opts.decimal='.'] Decimal - set to a string (e.g. ',') to use that or set to false to avoid outputting values with a decimal\n   * @param {Boolean} [opts.round=false] Round numbers off rather than flooring/truncating. When true, 105000 would become '11m', when false it becomes '10m'\n   * @param {Boolean} [opts.min10k=false] Do not abbreviate numbers below 10000. E.g. 9999 would become '9,999' rather than '9k'. (Stack Overflow-style)\n   * @param {String} [opts.prefix=''] Optional string to prepend to the value, e.g. '$'\n   * @param {String} [opts.suffix=''] Optional string to append to the value, e.g. '%'\n   *\n   * @returns {String}\n   */\n  function approximateNumber(num, opts) {\n    var numString;\n    opts = opts || {};\n\n    // if we're working on a negative number, convert it to positive and then prefix the final result with a -\n    var negative = num < 0;\n    if (negative) {\n      num = Math.abs(num);\n    }\n\n    var thousandsBreak = opts.min10k ? TEN_THOUSAND : THOUSAND;\n\n    if (num < thousandsBreak) {\n      numString = addCommas(formatDec(num, 1, opts), opts);\n    } else if (num < MILLION) {\n      numString =  formatDec(num, THOUSAND, opts) + 'k';\n    } else if (num < BILLION) {\n      numString =  formatDec(num, MILLION, opts) + 'm';\n    } else if (num < TRILLION) {\n      numString =  addCommas(formatDec(num,  BILLION, opts), opts) + 'b';\n    } else {\n      numString = addCommas(formatDec(num,  TRILLION, opts), opts) + 't';\n    }\n\n    if (negative) {\n      numString = '-' + numString;\n    }\n\n    if (opts.capital) {\n      numString = numString.toUpperCase();\n    }\n\n    if (opts.prefix) {\n      numString = opts.prefix + numString;\n    }\n    if (opts.suffix) {\n      numString = numString + opts.suffix;\n    }\n\n    return numString;\n  }\n\n  approximateNumber.addCommas = addCommas;\n\n  if (typeof module === 'object') {\n    // node.js/common js\n    module.exports = approximateNumber;\n  } else if (typeof define === 'function') {\n    // require.js/amd\n    define([], approximateNumber);\n  } else if(typeof window !== 'undefined') {\n    window.approximateNumber = approximateNumber;\n  }\n}());\n"]}]}