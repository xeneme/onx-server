function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defaultOptions = {
  optionGroupName: 'subs',
  broadcastName: '$cast'
};
var Bus =
/*#__PURE__*/
function () {
  function Bus() {
    _classCallCheck(this, Bus);

    _defineProperty(this, "componentSubscriptionList", new Map());
  }

  _createClass(Bus, [{
    key: "on",
    value: function on(event, closure, component) {
      var _this = this;

      if (Array.isArray(event)) {
        event.forEach(function (event) {
          return _this.on(event, closure, component);
        });
        return;
      }

      var componentSubscribes = this.componentSubscriptionList.get(component) || this.subscribeNew(component);
      componentSubscribes[event] = closure;
    }
  }, {
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      this.componentSubscriptionList.forEach(function (componentSubscription, component) {
        var _componentSubscriptio;

        componentSubscription[event] && (_componentSubscriptio = componentSubscription[event]).call.apply(_componentSubscriptio, [component].concat(args));
      });
    }
  }, {
    key: "wipeComponentSubscriptions",
    value: function wipeComponentSubscriptions(component) {
      this.componentSubscriptionList.delete(component);
    }
  }, {
    key: "subscribeNew",
    value: function subscribeNew(component) {
      var componentSubscriptions = {};
      this.componentSubscriptionList.set(component, componentSubscriptions);
      return componentSubscriptions;
    }
  }]);

  return Bus;
}();
var BusPlugin = {
  install: function PluginFunction(_Vue, options) {
    var _ref = Object.assign({}, defaultOptions, options),
        broadcastName = _ref.broadcastName,
        optionGroupName = _ref.optionGroupName;

    var bus = new Bus();
    _Vue.config.optionMergeStrategies.subs = _Vue.config.optionMergeStrategies.methods;

    _Vue.mixin({
      created: function created() {
        var vm = this;
        var subs = vm.$options[optionGroupName];

        if (subs) {
          // For in didn't work for me here for some reason.
          Object.keys(subs).forEach(function (key) {
            bus.on(key, subs[key], vm);
          });
        }
      },
      beforeDestroy: function beforeDestroy() {
        bus.wipeComponentSubscriptions(this);
      }
    });

    _Vue.prototype[broadcastName] = function (event) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      bus.emit.apply(bus, [event].concat(args));
    }; // For debug purposes.


    _Vue.prototype.$busInstance = bus;
  }
};

export { Bus, BusPlugin };
